{"version":3,"sources":["assets/logo.svg","assets/git.svg","components/Menu.js","../../src/index.js","components/SheetBox.js","components/Header.js","components/TitleSeparator.js","components/Wrap.js","components/Code.js","components/Footer.js","App.js","index.js"],"names":["module","exports","Menu","scrollTo","elId","element","document","getElementById","headerOffset","offsetPosition","window","pageYOffset","getBoundingClientRect","top","behavior","className","src","Logo","alt","onClick","resizeCanvas","canvas","width","height","ratio","newCanvasWidth","Math","newCanvasHeight","context","createRowOrColumnPropFunction","sizeProp","defaultValue","Array","cell","createCellPropFunction","cellProp","y","x","drawCell","cellContent","style","defaultCellStyle","xCoord","yCoord","cellWidth","cellHeight","xx","yy","obj","calculateRowsOrColsSizes","freezeCount","size","startingSize","startingIndex","visibleArea","visible","start","end","prev","ind","props","canvasRef","useRef","overlayRef","copyPasteTextAreaRef","useState","maxScroll","setMaxScroll","dataOffset","setDataOffset","x1","y1","x2","y2","selection","setSelection","knobArea","setKnobArea","editCell","setEditCell","editValue","setEditValue","arrowKeyCommitMode","setArrowKeyCommitMode","shiftKeyDown","setShiftKeyDown","knobDragInProgress","setKnobDragInProgress","selectionInProgress","setSelectionInProgress","columnResize","setColumnResize","rowResize","setRowResize","rowSelectionInProgress","setRowSelectionInProgress","columnSelectionInProgress","setColumnSelectionInProgress","hitTarget","buttonClickMouseDownCoordinates","setButtonClickMouseDownCoordinates","useResizeObserver","ref","canvasWidth","canvasHeight","freezeColumns","freezeRows","textAlign","fontSize","marginRight","marginLeft","color","fontFamily","weight","columnHeaders","cellReadOnly","sourceData","displayData","editData","cellStyle","visibleColumns","columnXStart","columnXEnd","visibleRows","rowYStart","rowYEnd","changeSelection","scrollToP2","newDataOffset","newScrollLeft","newScrollTop","increment","newX","newY","setTimeout","sx1","sy1","sx2","sy2","absCoordianteToCell","absX","absY","cellX","cellY","i","cellToAbsCoordinate","indX","indY","knobCoordinates","useMemo","selx2","sely2","c","hitMap","hitM","absX1","absY1","absX2","absY2","w","h","x1key","x2key","y1key","y2key","xkey","xbin","ykey","useEffect","animationFrameId","yCoord1","xCoord1","hideKnob","selx1","sely1","selectionActive","p1","p2","currentCol","currentRow","startX","col","startY","row","rowHeaderWidth","ch","headerCellStyle","columnHeaderHeight","kx1","kx2","ky1","ky2","knobPoint1","knobPoint2","knobSize","cw","setFocusToTextArea","preventScroll","setCopyPasteText","activeTagName","onPaste","e","clipboardData","types","pastedHtml","parsePastedHtml","text","parsePastedText","html","div","pasteLocX","pasteLocY","changes","tableNode","findTable","child","maybeTable","tableChild","tr","td","value","innerHTML","rows","pasteX2","pasteY2","cols","dy1","dy2","dx1","dx2","cptext","commitEditingCell","startEditingCell","editDataValue","val","onMouseUp","fx1","fy1","fx2","fy2","srcY","srcX","rect","onMouseMove","hitTargetKeyX","hitTargetKeyY","newWidth","newHeight","sel2","editMode","editTextPosition","editTextWidth","editTextHeight","editTextTextAlign","position","outline","onDoubleClick","onMouseDown","oldWidth","colIdx","oldHeight","rowIdx","sel1","onMouseLeave","onContextMenu","onScroll","newMaxScroll","styles","left","overflow","borderBottom","backgroundColor","opacity","onFocus","autoFocus","tabIndex","onKeyDown","includes","String","onKeyUp","type","onChange","border","initialDataBig","r","push","initialDataBasic","initialDataFormatting","random","SheetBoxHeader","data","setData","fill","setCellWidth","setCellHeight","onSelectionChanged","onRightClick","newData","change","readOnly","onCellWidthChange","columnIdx","length","onCellHeightChange","SheetBoxBasic","SheetBoxStyle","colors","alignment","fillColor","SheetBoxFormatting","toFixed","Header","textAreaRef","copySuccess","setCopySuccess","id","current","select","execCommand","target","focus","href","GitIcon","TitleSeparator","title","Wrap","children","Code","language","xcode","Footer","App","overflowX","ReactDOM","render"],"mappings":"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","file":"static/js/main.7eaf5eed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.aef13910.svg\";","module.exports = __webpack_public_path__ + \"static/media/git.f818b886.svg\";","import React from 'react';\nimport Logo from '../assets/logo.svg';\n\nfunction Menu() {\n    const scrollTo = (elId) => {\n        var element = document.getElementById(elId);\n        var headerOffset = elId === 'home' ? 0 : 86;\n        var elementPosition = window.pageYOffset + element.getBoundingClientRect().top;\n        var offsetPosition = elementPosition - headerOffset;\n\n        window.scrollTo({\n             top: offsetPosition,\n             behavior: \"smooth\"\n        });\n    }\n\n    return (\n        <div className=\"container blue-bg menu\">\n            <div className=\"content flex-row\">\n                <div className=\"logo-box\">\n                    <img src={Logo} alt=\"Logo\" />\n                    <h2 className=\"page-title\">sheet - happens</h2>\n                </div>\n                <div className=\"nav\">\n                    <div className=\"nav-item\" onClick={() => scrollTo('home')} >home</div>\n                    <div className=\"nav-item\" onClick={() => scrollTo('usage')} >usage</div>\n                    <div className=\"nav-item\" onClick={() => scrollTo('features')} >features</div>\n                    <div className=\"nav-item\" onClick={() => scrollTo('documentation')} >documentation</div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Menu;\n","import styles from './styles.module.css';\nimport React, { useRef, useEffect, useState, useMemo } from 'react';\nimport useResizeObserver from 'use-resize-observer';\n\nfunction resizeCanvas(canvas) {\n    const { width, height } = canvas.getBoundingClientRect();\n    let { devicePixelRatio: ratio = 1 } = window;\n    if (ratio < 1) {\n        ratio = 1;\n    }\n    const newCanvasWidth = Math.round(width * ratio);\n    const newCanvasHeight = Math.round(height * ratio);\n\n    if (canvas.width !== newCanvasWidth || canvas.height !== newCanvasHeight) {\n        const context = canvas.getContext('2d');\n        canvas.width = newCanvasWidth;\n        canvas.height = newCanvasHeight;\n        context.scale(ratio, ratio);\n        return true;\n    }\n\n    return false;\n}\n\nfunction createRowOrColumnPropFunction(sizeProp, defaultValue) {\n    return (cell) => {\n        if (Array.isArray(sizeProp)) {\n            if (cell >= 0 && cell < sizeProp.length) {\n                return sizeProp[cell];\n            } else {\n                return defaultValue;\n            }\n        } else if (typeof sizeProp === 'function') {\n            return sizeProp(cell);\n        } else if (typeof sizeProp === 'number') {\n            return sizeProp;\n        } else {\n            return defaultValue;\n        }\n    };\n}\n\nfunction createCellPropFunction(cellProp, defaultValue) {\n    return (x, y) => {\n        if (Array.isArray(cellProp)) {\n            if (y >= 0 && y < cellProp.length) {\n                if (x >= 0 && x < cellProp[y].length) {\n                    return cellProp[y][x];\n                } else {\n                    return defaultValue;\n                }\n            } else {\n                return defaultValue;\n            }\n        } else if (typeof cellProp === 'function') {\n            return cellProp(x, y);\n        } else if (cellProp !== null && cellProp !== undefined) {\n            return cellProp;\n        } else {\n            return defaultValue;\n        }\n    };\n}\n\nfunction drawCell(context, cellContent, style, defaultCellStyle, xCoord, yCoord, cellWidth, cellHeight) {\n    style.color = style.color || defaultCellStyle.color;\n    style.fontSize = style.fontSize || defaultCellStyle.fontSize;\n    style.fontFamily = style.fontFamily || defaultCellStyle.fontFamily;\n    style.textAlign = style.textAlign || defaultCellStyle.textAlign;\n    style.marginRight = style.marginRight || defaultCellStyle.marginRight;\n    style.marginLeft = style.marginLeft || defaultCellStyle.marginLeft;\n    style.weight = style.weight || defaultCellStyle.weight;\n\n    context.fillStyle = style.color;\n    context.font = style.weight + style.fontSize + 'px ' + style.fontFamily;\n    context.textAlign = style.textAlign;\n\n    const adjustment = style.textAlign === 'right' ? cellWidth - style.marginRight : style.marginLeft;\n    const xx = xCoord + adjustment;\n    const yy = yCoord + cellHeight * 0.5;\n\n    context.save();\n    context.beginPath();\n    context.rect(xCoord, yCoord, cellWidth, cellHeight);\n    context.clip();\n\n    if (style.backgroundColor) {\n        context.fillStyle = style.backgroundColor;\n        context.fillRect(xCoord, yCoord, cellWidth, cellHeight);\n        context.fillStyle = style.color;\n    }\n\n    if (Array.isArray(cellContent)) {\n        for (const obj of cellContent) {\n            if (obj.content instanceof HTMLImageElement) {\n                context.drawImage(obj.content, xCoord + obj.x, yy + obj.y, obj.width, obj.height);\n            } else if (typeof obj.content === 'string') {\n                context.fillText(obj.content, xCoord + obj.x, yy + obj.y);\n            }\n        }\n    } else {\n        context.fillText(cellContent, xx, yy);\n    }\n    context.restore();\n}\n\nfunction calculateRowsOrColsSizes(freezeCount, size, startingSize, startingIndex, visibleArea) {\n    const visible = [];\n    const start = [];\n    const end = [];\n    let prev = 0;\n\n    start.push(startingSize);\n    visible.push(freezeCount > 0 ? 0 : startingIndex);\n    let firstSize = freezeCount > 0 ? size(0) : size(startingIndex);\n    prev = startingSize + firstSize;\n    end.push(prev);\n\n    let ind = freezeCount > 0 ? 1 : startingIndex + 1;\n\n    if (freezeCount > 0) {\n        for (; ind < freezeCount; ind++) {\n            visible.push(ind);\n            start.push(prev);\n            prev = prev + size(ind);\n            end.push(prev);\n        }\n        ind = Math.max(startingIndex, freezeCount);\n    }\n\n    while (true) {\n        visible.push(ind);\n        start.push(prev);\n        prev = prev + size(ind);\n        end.push(prev);\n        if (end[end.length - 1] >= visibleArea) {\n            break;\n        }\n        ind++;\n    }\n    return {\n        visible,\n        start,\n        end,\n    };\n}\n\nfunction Sheet(props) {\n    const canvasRef = useRef(null);\n    const overlayRef = useRef(null);\n    const copyPasteTextAreaRef = useRef(null);\n    const [maxScroll, setMaxScroll] = useState({ x: 5000, y: 5000 });\n    const [dataOffset, setDataOffset] = useState({ x: 0, y: 0 });\n    const [selection, setSelection] = useState({ x1: -1, y1: -1, x2: -1, y2: -1 });\n    const [knobArea, setKnobArea] = useState({ x1: -1, y1: -1, x2: -1, y2: -1 });\n    const [editCell, setEditCell] = useState({ x: -1, y: -1 });\n    const [editValue, setEditValue] = useState('');\n    const [arrowKeyCommitMode, setArrowKeyCommitMode] = useState(false);\n    const [shiftKeyDown, setShiftKeyDown] = useState(false);\n    const [knobDragInProgress, setKnobDragInProgress] = useState(false);\n    const [selectionInProgress, setSelectionInProgress] = useState(false);\n    const [columnResize, setColumnResize] = useState(null);\n    const [rowResize, setRowResize] = useState(null);\n    const [rowSelectionInProgress, setRowSelectionInProgress] = useState(false);\n    const [columnSelectionInProgress, setColumnSelectionInProgress] = useState(false);\n    const [buttonClickMouseDownCoordinates, setButtonClickMouseDownCoordinates] = useState({\n        x: -1,\n        y: -1,\n        hitTarget: null,\n    });\n    const { width: canvasWidth = 3000, height: canvasHeight = 3000 } = useResizeObserver({ ref: canvasRef });\n\n    const selBorderColor = '#1b73e7';\n    const selBackColor = '#e9f0fd';\n    const knobSize = 6;\n    const gridColor = '#e2e3e3';\n    const knobAreaBorderColor = '#707070';\n    const rowHeaderWidth = 50;\n    const rowHeaderBackgroundColor = '#f8f9fa';\n    const rowHeaderTextColor = '#666666';\n    const rowHeaderSelectedBackgroundColor = '#e8eaed';\n    const columnHeaderHeight = 22;\n    const columnHeaderBackgroundColor = rowHeaderBackgroundColor;\n    const columnHeaderSelectedBackgroundColor = rowHeaderSelectedBackgroundColor;\n    const columnHeaderTextColor = rowHeaderTextColor;\n    const xBinSize = 10;\n    const yBinSize = 10;\n    const scrollSpeed = 30;\n    const resizeColumnRowMouseThreshold = 4;\n    const minimumColumnWidth = 50;\n    const minimumRowHeight = 22;\n\n    const freezeColumns = props.freezeColumns || 0;\n    const freezeRows = props.freezeRows || 0;\n\n    const defaultCellStyle = {\n        textAlign: 'left',\n        fontSize: 13,\n        marginRight: 5,\n        marginLeft: 5,\n        color: '#000',\n        fontFamily: 'sans-serif',\n        weight: '',\n    };\n\n    const cellWidth = createRowOrColumnPropFunction(props.cellWidth, 100);\n    const cellHeight = createRowOrColumnPropFunction(props.cellHeight, 22);\n    const columnHeaders = createRowOrColumnPropFunction(props.columnHeaders, null);\n\n    const cellReadOnly = createCellPropFunction(props.readOnly, false);\n\n    const sourceData = createCellPropFunction(props.sourceData, null);\n    const displayData = createCellPropFunction(props.displayData, null);\n    const editData = createCellPropFunction(props.editData, null);\n    const cellStyle = createCellPropFunction(props.cellStyle, defaultCellStyle);\n\n    // todo: somehow memoize, or only recalculate when inputs change...\n    const { visible: visibleColumns, start: columnXStart, end: columnXEnd } = calculateRowsOrColsSizes(\n        freezeColumns,\n        cellWidth,\n        rowHeaderWidth,\n        dataOffset.x,\n        canvasWidth\n    );\n\n    const { visible: visibleRows, start: rowYStart, end: rowYEnd } = calculateRowsOrColsSizes(\n        freezeRows,\n        cellHeight,\n        columnHeaderHeight,\n        dataOffset.y,\n        canvasHeight\n    );\n\n    const changeSelection = (x1, y1, x2, y2, scrollToP2 = true) => {\n        setSelection({ x1, y1, x2, y2 });\n\n        if (scrollToP2) {\n            const newDataOffset = { x: dataOffset.x, y: dataOffset.y };\n            let newScrollLeft = -1;\n            let newScrollTop = -1;\n\n            if (!visibleColumns.includes(x2) || visibleColumns[visibleColumns.length - 1] === x2) {\n                const increment = visibleColumns[visibleColumns.length - 1] <= x2 ? 1 : -1;\n                const newX = Math.max(dataOffset.x, freezeColumns) + increment;\n                newDataOffset.x = newX;\n                newScrollLeft = newX * scrollSpeed;\n            }\n\n            if (!visibleRows.includes(y2) || visibleRows[visibleRows.length - 1] === y2) {\n                const increment = visibleRows[visibleRows.length - 1] <= y2 ? 1 : -1;\n                const newY = Math.max(dataOffset.y, freezeRows) + increment;\n                newDataOffset.y = newY;\n                newScrollTop = newY * scrollSpeed;\n            }\n\n            if (newDataOffset.x !== dataOffset.x || dataOffset.y !== newDataOffset.y) {\n                setDataOffset({ x: newDataOffset.x, y: newDataOffset.y });\n                setTimeout(() => {\n                    if (overlayRef.current) {\n                        if (newScrollLeft !== -1) {\n                            overlayRef.current.scrollLeft = newScrollLeft;\n                        }\n                        if (newScrollTop !== -1) {\n                            overlayRef.current.scrollTop = newScrollTop;\n                        }\n                    }\n                }, 0);\n            }\n        }\n\n        if (props.onSelectionChanged) {\n            let sx1 = x1;\n            let sy1 = y1;\n            let sx2 = x2;\n            let sy2 = y2;\n            if (sx1 > sx2) {\n                sx1 = x2;\n                sx2 = x1;\n            }\n            if (sy1 > sy2) {\n                sy1 = y2;\n                sy2 = y1;\n            }\n            props.onSelectionChanged(sx1, sy1, sx2, sy2);\n        }\n    };\n\n    const absCoordianteToCell = (absX, absY) => {\n        let cellX = 0;\n        let cellY = 0;\n\n        for (let i = 0; i < visibleColumns.length; i++) {\n            if (absX >= columnXStart[i] && absX <= columnXEnd[i]) {\n                cellX = visibleColumns[i];\n                break;\n            }\n        }\n        for (let i = 0; i < visibleRows.length; i++) {\n            if (absY >= rowYStart[i] && absY <= rowYEnd[i]) {\n                cellY = visibleRows[i];\n                break;\n            }\n        }\n\n        return { x: cellX, y: cellY };\n    };\n\n    const cellToAbsCoordinate = (cellX, cellY) => {\n        let absX = rowHeaderWidth;\n        const indX = visibleColumns.findIndex((i) => i === cellX);\n        if (indX !== -1) {\n            absX = columnXStart[indX];\n        } else {\n            for (let i = 0; i < dataOffset.x; i++) {\n                absX -= cellWidth(i);\n            }\n            for (let i = 0; i < cellX; i++) {\n                absX += cellWidth(i);\n            }\n        }\n\n        let absY = columnHeaderHeight;\n        const indY = visibleRows.findIndex((i) => i === cellY);\n        if (indY !== -1) {\n            absY = rowYStart[indY];\n        } else {\n            for (let i = 0; i < dataOffset.y; i++) {\n                absY -= cellHeight(i);\n            }\n            for (let i = 0; i < cellY; i++) {\n                absY += cellHeight(i);\n            }\n        }\n        return { x: absX, y: absY };\n    };\n\n    const knobCoordinates = useMemo(() => {\n        if (selection.x2 !== -1 && selection.y2 !== -1) {\n            let selx2 = selection.x2;\n            if (selection.x1 > selection.x2) {\n                selx2 = selection.x1;\n            }\n\n            let sely2 = selection.y2;\n            if (selection.y1 > selection.y2) {\n                sely2 = selection.y1;\n            }\n            const c = cellToAbsCoordinate(selx2, sely2);\n            return { x: c.x + cellWidth(selx2), y: c.y + cellHeight(sely2) };\n        }\n        return { x: -1, y: -1 };\n    }, [selection, visibleRows, visibleColumns]);\n\n    const hitMap = useMemo(() => {\n        const hitM = {};\n        const canvas = canvasRef.current;\n        if (!canvas) {\n            return hitM;\n        }\n        resizeCanvas(canvas);\n        let yCoord = columnHeaderHeight;\n        for (const y of visibleRows) {\n            let xCoord = rowHeaderWidth;\n            for (const x of visibleColumns) {\n                const cellContent = displayData(x, y);\n                if (cellContent === null || cellContent === undefined) {\n                    xCoord += cellWidth(x);\n                    continue;\n                }\n\n                const xx = xCoord;\n                const yy = yCoord + cellHeight(y) * 0.5;\n\n                if (Array.isArray(cellContent)) {\n                    for (const obj of cellContent) {\n                        if (obj.onClick) {\n                            const absX1 = xx + obj.x;\n                            const absY1 = yy + obj.y;\n                            const absX2 = absX1 + obj.width;\n                            const absY2 = absY1 + obj.height;\n\n                            const hitTarget = {\n                                cellX: x,\n                                cellY: y,\n                                x: absX1,\n                                y: absY1,\n                                w: obj.width,\n                                h: obj.height,\n                                onClick: obj.onClick,\n                            };\n\n                            // add to hit map\n                            const x1key = Math.floor(absX1 / xBinSize);\n                            const x2key = Math.floor(absX2 / xBinSize);\n\n                            const y1key = Math.floor(absY1 / yBinSize);\n                            const y2key = Math.floor(absY2 / yBinSize);\n\n                            for (let xkey = x1key; xkey <= x2key; xkey++) {\n                                if (!hitM[xkey]) {\n                                    hitM[xkey] = {};\n                                }\n                                const xbin = hitM[xkey];\n                                for (let ykey = y1key; ykey <= y2key; ykey++) {\n                                    if (!xbin[ykey]) {\n                                        xbin[ykey] = [];\n                                    }\n                                    xbin[ykey].push(hitTarget);\n                                }\n                            }\n                        }\n                    }\n                }\n                xCoord += cellWidth(x);\n            }\n            yCoord += cellHeight(y);\n        }\n        return hitM;\n    }, [displayData, props.cellWidth, props.cellHeight, dataOffset.x, dataOffset.y]);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const context = canvas.getContext('2d');\n        let animationFrameId = window.requestAnimationFrame(() => {\n            resizeCanvas(canvas);\n            context.clearRect(0, 0, context.canvas.width, context.canvas.height);\n            context.fillStyle = 'white';\n            context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n\n            // apply cell fill color\n            let yCoord1 = columnHeaderHeight;\n            for (const y of visibleRows) {\n                let xCoord1 = rowHeaderWidth;\n                for (const x of visibleColumns) {\n                    const style = cellStyle(x, y);\n                    if (style.fillColor) {\n                        context.fillStyle = style.fillColor;\n                        context.fillRect(xCoord1, yCoord1, cellWidth(x), cellHeight(y));\n                    }\n                    xCoord1 += cellWidth(x);\n                }\n                yCoord1 += cellHeight(y);\n            }\n\n            let hideKnob = false;\n\n            let selx1 = selection.x1;\n            let selx2 = selection.x2;\n\n            if (selection.x1 > selection.x2) {\n                selx1 = selection.x2;\n                selx2 = selection.x1;\n            }\n\n            let sely1 = selection.y1;\n            let sely2 = selection.y2;\n\n            if (selection.y1 > selection.y2) {\n                sely1 = selection.y2;\n                sely2 = selection.y1;\n            }\n\n            const selectionActive = selx1 !== -1 && selx2 !== -1 && sely1 !== -1 && sely2 !== -1;\n\n            const p1 = cellToAbsCoordinate(selx1, sely1);\n            const p2 = cellToAbsCoordinate(selx2, sely2);\n            p2.x += cellWidth(selx2);\n            p2.y += cellHeight(sely2);\n\n            if (p1.x >= p2.x) {\n                // recalculate if the selection span covers both frozen and unfrozen columns\n                p2.x = p1.x;\n                let currentCol = selx1;\n                while (visibleColumns.includes(currentCol)) {\n                    p2.x += cellWidth(currentCol);\n                    currentCol++;\n                }\n                hideKnob = true;\n            }\n\n            if (p1.y >= p2.y) {\n                // recalculate if the selection span covers both frozen and unfrozen rows\n                p2.y = p1.y;\n                let currentRow = sely1;\n                while (visibleRows.includes(currentRow)) {\n                    p2.y += cellHeight(currentRow);\n                    currentRow++;\n                }\n                hideKnob = true;\n            }\n\n            // selection fill\n            if (selectionActive) {\n                context.fillStyle = selBackColor;\n                context.fillRect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y);\n            }\n\n            // row header background\n            context.fillStyle = rowHeaderBackgroundColor;\n            context.fillRect(0, 0, rowHeaderWidth, context.canvas.height);\n\n            // row header selection\n            if (selectionActive) {\n                context.fillStyle = rowHeaderSelectedBackgroundColor;\n                context.fillRect(0, p1.y, rowHeaderWidth, p2.y - p1.y);\n            }\n\n            // column header background\n            context.fillStyle = columnHeaderBackgroundColor;\n            context.fillRect(0, 0, context.canvas.width, columnHeaderHeight);\n\n            // column header selection\n            if (selectionActive) {\n                context.fillStyle = columnHeaderSelectedBackgroundColor;\n                context.fillRect(p1.x, 0, p2.x - p1.x, columnHeaderHeight);\n            }\n\n            // grid\n            context.strokeStyle = gridColor;\n            context.lineWidth = 1;\n            let startX = rowHeaderWidth;\n\n            for (const col of visibleColumns) {\n                context.beginPath();\n                context.moveTo(startX, 0);\n                context.lineTo(startX, context.canvas.height);\n                context.stroke();\n                startX += cellWidth(col);\n            }\n\n            let startY = columnHeaderHeight;\n            for (const row of visibleRows) {\n                context.beginPath();\n                context.moveTo(0, startY);\n                context.lineTo(context.canvas.width, startY);\n                context.stroke();\n                startY += cellHeight(row);\n            }\n\n            // row header text\n            startY = columnHeaderHeight;\n            context.textBaseline = 'middle';\n            context.textAlign = 'center';\n            context.font = defaultCellStyle.fontSize + 'px ' + defaultCellStyle.fontFamily;\n            context.fillStyle = rowHeaderTextColor;\n            for (const row of visibleRows) {\n                const xx = rowHeaderWidth * 0.5;\n                const yy = startY + cellHeight(row) * 0.5;\n                const cellContent = row + 1;\n                context.fillText(cellContent, xx, yy);\n                startY += cellHeight(row);\n            }\n\n            // column header text\n            startX = rowHeaderWidth;\n            context.textBaseline = 'middle';\n            context.textAlign = 'center';\n            for (const col of visibleColumns) {\n                const xx = startX + cellWidth(col) * 0.5;\n                const yy = columnHeaderHeight * 0.5;\n                const ch = columnHeaders(col);\n                let headerCellStyle = {};\n                let cellContent = null;\n                if (typeof ch === 'object' && ch !== null && ch.headerCellStyle) {\n                    headerCellStyle = ch.headerCellStyle;\n                }\n                if (typeof ch === 'object' && ch !== null) {\n                    cellContent = ch.cellContent;\n                } else {\n                    cellContent = ch;\n                }\n\n                headerCellStyle.color = headerCellStyle.color || columnHeaderTextColor;\n                headerCellStyle.fontSize = headerCellStyle.fontSize || defaultCellStyle.fontSize;\n                headerCellStyle.fontFamily = headerCellStyle.fontFamily || defaultCellStyle.fontFamily;\n                headerCellStyle.weight = headerCellStyle.weight || defaultCellStyle.weight;\n                context.font = headerCellStyle.weight + headerCellStyle.fontSize + 'px ' + headerCellStyle.fontFamily;\n                context.fillStyle = headerCellStyle.color;\n                if (cellContent === null || cellContent === undefined) {\n                    cellContent = col + 1;\n                }\n                context.fillText(cellContent, xx, yy);\n                startX += cellWidth(col);\n            }\n\n            // selection outline\n            if (selectionActive) {\n                context.strokeStyle = selBorderColor;\n                context.lineWidth = 1;\n                context.beginPath();\n                context.rect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y);\n                context.stroke();\n            }\n\n            // knob drag outline\n            if (knobDragInProgress) {\n                let kx1 = knobArea.x1;\n                let kx2 = knobArea.x2;\n                if (knobArea.x1 > knobArea.x2) {\n                    kx1 = knobArea.x2;\n                    kx2 = knobArea.x1;\n                }\n\n                let ky1 = knobArea.y1;\n                let ky2 = knobArea.y2;\n                if (knobArea.y1 > knobArea.y2) {\n                    ky1 = knobArea.y2;\n                    ky2 = knobArea.y1;\n                }\n                const knobPoint1 = cellToAbsCoordinate(kx1, ky1);\n                const knobPoint2 = cellToAbsCoordinate(kx2 + 1, ky2 + 1);\n                context.strokeStyle = knobAreaBorderColor;\n                context.setLineDash([3, 3]);\n                context.lineWidth = 1;\n                context.beginPath();\n                context.rect(knobPoint1.x, knobPoint1.y - 1, knobPoint2.x - knobPoint1.x, knobPoint2.y - knobPoint1.y);\n                context.stroke();\n                context.setLineDash([]);\n            }\n\n            // selection knob\n            if (selectionActive && !hideKnob) {\n                context.fillStyle = selBorderColor;\n                context.fillRect(p2.x - knobSize * 0.5, p2.y - knobSize * 0.5, knobSize, knobSize);\n            }\n\n            // content\n            context.textBaseline = 'middle';\n\n            // draw content\n            let yCoord = columnHeaderHeight;\n            for (const y of visibleRows) {\n                let xCoord = rowHeaderWidth;\n                const ch = cellHeight(y);\n                for (const x of visibleColumns) {\n                    const cellContent = displayData(x, y);\n                    const cw = cellWidth(x);\n                    if (cellContent !== null && cellContent !== undefined) {\n                        const style = cellStyle(x, y);\n                        drawCell(context, cellContent, style, defaultCellStyle, xCoord, yCoord, cw, ch);\n                    }\n                    xCoord += cw;\n                }\n                yCoord += ch;\n            }\n        });\n\n        return () => {\n            window.cancelAnimationFrame(animationFrameId);\n        };\n    }, [\n        props.displayData,\n        dataOffset.x,\n        dataOffset.y,\n        selection,\n        knobDragInProgress,\n        knobArea,\n        canvasWidth,\n        canvasHeight,\n        columnResize,\n        cellWidth,\n        cellHeight,\n    ]);\n\n    const setFocusToTextArea = () => {\n        if (copyPasteTextAreaRef.current) {\n            copyPasteTextAreaRef.current.focus({ preventScroll: true });\n            copyPasteTextAreaRef.current.select();\n        }\n    };\n\n    useEffect(() => {\n        if (!editMode) {\n            setCopyPasteText();\n            if (document.activeElement === copyPasteTextAreaRef.current) {\n                setFocusToTextArea();\n            } else {\n                const activeTagName = document.activeElement.tagName.toLowerCase();\n                if (\n                    !(\n                        (activeTagName === 'div' && document.activeElement.contentEditable === 'true') ||\n                        activeTagName === 'input' ||\n                        activeTagName === 'textarea' ||\n                        activeTagName === 'select'\n                    )\n                ) {\n                    setFocusToTextArea();\n                }\n            }\n        }\n    });\n\n    const onPaste = (e) => {\n        if (!copyPasteTextAreaRef) {\n            return;\n        }\n        if (e.target !== copyPasteTextAreaRef.current) {\n            return;\n        }\n        e.preventDefault();\n\n        const clipboardData = e.clipboardData || window.clipboardData;\n\n        const types = clipboardData.types;\n        if (types.includes('text/html')) {\n            const pastedHtml = clipboardData.getData('text/html');\n            parsePastedHtml(pastedHtml);\n        } else if (types.includes('text/plain')) {\n            const text = clipboardData.getData('text/plain');\n            parsePastedText(text);\n        }\n    };\n\n    useEffect(() => {\n        window.document.addEventListener('paste', onPaste);\n        return () => {\n            window.document.removeEventListener('paste', onPaste);\n        };\n    });\n\n    const findTable = (element) => {\n        for (const child of element.children) {\n            if (child.nodeName === 'TABLE') {\n                return child;\n            }\n            const maybeTable = findTable(child);\n            if (maybeTable) {\n                return maybeTable;\n            }\n        }\n    };\n\n    const parsePastedHtml = (html) => {\n        const div = document.createElement('div');\n        div.innerHTML = html.trim();\n        let pasteLocX = -1;\n        let pasteLocY = -1;\n        if (selection.x1 !== -1 && selection.x2 === -1) {\n            pasteLocX = selection.x1;\n        }\n        if (selection.y1 !== -1 && selection.y2 === -1) {\n            pasteLocY = selection.y1;\n        }\n        if (selection.x1 !== -1 && selection.x2 !== -1) {\n            pasteLocX = Math.min(selection.x1, selection.x2);\n        }\n        if (selection.y1 !== -1 && selection.y2 !== -1) {\n            pasteLocY = Math.min(selection.y1, selection.y2);\n        }\n        if (pasteLocX === -1 || pasteLocY === -1) {\n            return;\n        }\n\n        let x = pasteLocX;\n        let y = pasteLocY;\n        const changes = [];\n\n        const tableNode = findTable(div);\n        if (!tableNode) {\n            return;\n        }\n\n        for (const tableChild of tableNode.children) {\n            if (tableChild.nodeName === 'TBODY') {\n                for (const tr of tableChild.children) {\n                    x = pasteLocX;\n                    if (tr.nodeName === 'TR') {\n                        for (const td of tr.children) {\n                            if (td.nodeName === 'TD') {\n                                changes.push({ y: y, x: x, value: td.innerHTML });\n                                x++;\n                            }\n                        }\n                        y++;\n                    }\n                }\n            }\n        }\n\n        if (props.onChange) {\n            props.onChange(changes);\n        }\n        let pasteX2 = x - 1;\n        let pasteY2 = y - 1;\n        changeSelection(pasteLocX, pasteLocY, pasteX2, pasteY2, false);\n    };\n\n    const parsePastedText = (text) => {\n        let pasteLocX = -1;\n        let pasteLocY = -1;\n        if (selection.x1 !== -1 && selection.x2 === -1) {\n            pasteLocX = selection.x1;\n        }\n        if (selection.y1 !== -1 && selection.y2 === -1) {\n            pasteLocY = selection.y1;\n        }\n        if (selection.x1 !== -1 && selection.x2 !== -1) {\n            pasteLocX = Math.min(selection.x1, selection.x2);\n        }\n        if (selection.y1 !== -1 && selection.y2 !== -1) {\n            pasteLocY = Math.min(selection.y1, selection.y2);\n        }\n        if (pasteLocX === -1 || pasteLocY === -1) {\n            return;\n        }\n\n        const rows = text.split(/\\r?\\n/);\n        let pasteX2 = pasteLocX;\n        let pasteY2 = pasteLocY + rows.length - 1;\n        const changes = [];\n        for (let y = 0; y < rows.length; y++) {\n            const cols = rows[y].split('\\t');\n\n            if (pasteLocX + cols.length - 1 > pasteX2) {\n                pasteX2 = pasteLocX + cols.length - 1;\n            }\n            for (let x = 0; x < cols.length; x++) {\n                changes.push({ y: pasteLocY + y, x: pasteLocX + x, value: cols[x] });\n            }\n        }\n\n        if (props.onChange) {\n            props.onChange(changes);\n        }\n        changeSelection(pasteLocX, pasteLocY, pasteX2, pasteY2, false);\n    };\n\n    const setCopyPasteText = () => {\n        if (selection.x1 === -1 || selection.y1 === -1 || selection.x2 === -1 || selection.y2 === -1) {\n            return;\n        }\n\n        let dy1 = selection.y1;\n        let dy2 = selection.y2;\n        if (dy1 > dy2) {\n            dy1 = selection.y2;\n            dy2 = selection.y1;\n        }\n\n        let dx1 = selection.x1;\n        let dx2 = selection.x2;\n        if (dx1 > dx2) {\n            dx1 = selection.x2;\n            dx2 = selection.x1;\n        }\n\n        const rows = [];\n        for (let y = dy1; y <= dy2; y++) {\n            const row = [];\n            for (let x = dx1; x <= dx2; x++) {\n                const value = editData(x, y);\n                if (value !== null && value !== undefined) {\n                    row.push(value);\n                } else {\n                    row.push('');\n                }\n            }\n            rows.push(row.join('\\t'));\n        }\n        const cptext = rows.join('\\n');\n        if (copyPasteTextAreaRef.current) {\n            copyPasteTextAreaRef.current.value = cptext;\n        }\n    };\n\n    const commitEditingCell = () => {\n        if (props.onChange) {\n            props.onChange([{ x: editCell.x, y: editCell.y, value: editValue }]);\n        }\n\n        setEditCell({ x: -1, y: -1 });\n    };\n\n    const startEditingCell = (editCell) => {\n        if (cellReadOnly(editCell.x, editCell.y)) {\n            return;\n        }\n\n        const editDataValue = editData(editCell.x, editCell.y);\n        let val = '';\n        if (editDataValue !== null && editDataValue !== undefined) {\n            val = editDataValue;\n        }\n        setEditCell(editCell);\n        setEditValue(val);\n    };\n\n    const onScroll = (e) => {\n        const absX = e.target.scrollLeft;\n        const absY = e.target.scrollTop;\n\n        const cellX = Math.floor(absX / scrollSpeed);\n        const cellY = Math.floor(absY / scrollSpeed);\n        if (cellX !== dataOffset.x || cellY !== dataOffset.y) {\n            setDataOffset({ x: cellX, y: cellY });\n        }\n\n        let newMaxScroll = { ...maxScroll };\n        if (maxScroll.x / (absX + 0.5) < 1) {\n            newMaxScroll.x *= 1.5;\n        }\n        if (maxScroll.y / (absY + 0.5) < 1) {\n            newMaxScroll.y *= 1.5;\n        }\n        if (newMaxScroll.x !== maxScroll.x || maxScroll.y !== newMaxScroll.y) {\n            setMaxScroll({ ...newMaxScroll });\n        }\n    };\n\n    const onMouseLeave = (e) => {\n        window.document.body.style.cursor = 'auto';\n    };\n\n    const onMouseDown = (e) => {\n        if (e.button !== 0) {\n            return;\n        }\n        const rect = e.target.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        if (x > canvasWidth || y > canvasHeight) {\n            return;\n        }\n\n        const hitTargetKeyX = Math.floor(x / xBinSize);\n        const hitTargetKeyY = Math.floor(y / yBinSize);\n\n        if (hitMap[hitTargetKeyX] && hitMap[hitTargetKeyX][hitTargetKeyY]) {\n            for (const hitTarget of hitMap[hitTargetKeyX][hitTargetKeyY]) {\n                if (\n                    hitTarget.x <= x &&\n                    x <= hitTarget.x + hitTarget.w &&\n                    hitTarget.y <= y &&\n                    y <= hitTarget.y + hitTarget.h\n                ) {\n                    setButtonClickMouseDownCoordinates({ x, y, hitTarget });\n                    return;\n                }\n            }\n        }\n\n        if (y < columnHeaderHeight) {\n            let xx = rowHeaderWidth;\n            for (const col of visibleColumns) {\n                if (Math.abs(xx - x) < resizeColumnRowMouseThreshold) {\n                    window.document.body.style.cursor = 'col-resize';\n                    setColumnResize({\n                        startX: xx,\n                        oldWidth: cellWidth(col - 1),\n                        colIdx: col - 1,\n                    });\n                    return;\n                }\n                xx += cellWidth(col);\n            }\n        }\n        if (x < rowHeaderWidth) {\n            let yy = columnHeaderHeight;\n            for (const row of visibleRows) {\n                if (Math.abs(yy - y) < resizeColumnRowMouseThreshold) {\n                    window.document.body.style.cursor = 'row-resize';\n                    setRowResize({\n                        startY: yy,\n                        oldHeight: cellHeight(row - 1),\n                        rowIdx: row - 1,\n                    });\n                    return;\n                }\n                yy += cellHeight(row);\n            }\n        }\n\n        // knob drag mode\n        if (Math.abs(x - knobCoordinates.x) < knobSize && Math.abs(y - knobCoordinates.y) < knobSize) {\n            setKnobDragInProgress(true);\n            setKnobArea({ x1: selection.x1, y1: selection.y1, x2: selection.x2, y2: selection.y2 });\n            return;\n        }\n\n        const sel2 = absCoordianteToCell(x, y);\n        const sel1 = shiftKeyDown ? { x: selection.x1, y: selection.y1 } : { ...sel2 };\n\n        if (editMode) {\n            commitEditingCell();\n        }\n\n        let scrollToP2 = true;\n\n        if (x < rowHeaderWidth) {\n            sel2.x = 100;\n            scrollToP2 = false;\n            setRowSelectionInProgress(true);\n        } else {\n            setRowSelectionInProgress(false);\n        }\n\n        if (y < columnHeaderHeight) {\n            sel2.y = 100;\n            scrollToP2 = false;\n            setColumnSelectionInProgress(true);\n        } else {\n            setColumnSelectionInProgress(false);\n        }\n\n        setSelectionInProgress(true);\n        changeSelection(sel1.x, sel1.y, sel2.x, sel2.y, scrollToP2);\n        setEditCell({ x: -1, y: -1 });\n    };\n\n    const onMouseUp = (e) => {\n        if (knobDragInProgress) {\n            let sx1 = selection.x1;\n            let sx2 = selection.x2;\n            if (selection.x1 > selection.x2) {\n                sx1 = selection.x2;\n                sx2 = selection.x1;\n            }\n            let sy1 = selection.y1;\n            let sy2 = selection.y2;\n            if (selection.y1 > selection.y2) {\n                sy1 = selection.y2;\n                sy2 = selection.y1;\n            }\n            let kx1 = knobArea.x1;\n            let kx2 = knobArea.x2;\n            if (knobArea.x1 > knobArea.x2) {\n                kx1 = knobArea.x2;\n                kx2 = knobArea.x1;\n            }\n            let ky1 = knobArea.y1;\n            let ky2 = knobArea.y2;\n            if (knobArea.y1 > knobArea.y2) {\n                ky1 = knobArea.y2;\n                ky2 = knobArea.y1;\n            }\n\n            let fx1 = kx1;\n            let fy1 = ky1;\n            let fx2 = kx2;\n            let fy2 = ky2;\n\n            const changes = [];\n\n            if (fx2 - fx1 === sx2 - sx1) {\n                // vertical\n                if (fy1 === sy1) {\n                    fy1 = sy2 + 1;\n                } else {\n                    fy2 = sy1 - 1;\n                }\n\n                let srcY = sy1;\n                for (let y = fy1; y <= fy2; y++) {\n                    for (let x = fx1; x <= fx2; x++) {\n                        const value = sourceData(x, srcY);\n                        changes.push({ x: x, y: y, value: value });\n                    }\n                    srcY = srcY + 1;\n                    if (srcY > sy2) {\n                        srcY = sy1;\n                    }\n                }\n            } else {\n                // horizontal\n                if (fx1 === sx1) {\n                    fx1 = sx2 + 1;\n                } else {\n                    fx2 = sx1 - 1;\n                }\n                let srcX = sx1;\n                for (let x = fx1; x <= fx2; x++) {\n                    for (let y = fy1; y <= fy2; y++) {\n                        const value = sourceData(srcX, y);\n                        changes.push({ x: x, y: y, value: value });\n                    }\n                    srcX = srcX + 1;\n                    if (srcX > sx2) {\n                        srcX = sx1;\n                    }\n                }\n            }\n\n            if (props.onChange) {\n                props.onChange(changes);\n            }\n\n            changeSelection(knobArea.x1, knobArea.y1, knobArea.x2, knobArea.y2);\n        }\n        setSelectionInProgress(false);\n        setRowSelectionInProgress(false);\n        setColumnSelectionInProgress(false);\n        setKnobDragInProgress(false);\n        setColumnResize(null);\n        setRowResize(null);\n\n        if (\n            buttonClickMouseDownCoordinates.x !== -1 &&\n            buttonClickMouseDownCoordinates.y !== -1 &&\n            buttonClickMouseDownCoordinates.hitTarget !== null\n        ) {\n            const rect = e.target.getBoundingClientRect();\n            const x = e.clientX - rect.left;\n            const y = e.clientY - rect.top;\n            const hitTarget = buttonClickMouseDownCoordinates.hitTarget;\n            if (\n                hitTarget.x <= x &&\n                x <= hitTarget.x + hitTarget.w &&\n                hitTarget.y <= y &&\n                y <= hitTarget.y + hitTarget.h\n            ) {\n                hitTarget.onClick();\n            }\n            setButtonClickMouseDownCoordinates({ x: -1, y: -1, hitTarget: null });\n        }\n    };\n\n    useEffect(() => {\n        window.addEventListener('mouseup', onMouseUp);\n        return () => {\n            window.removeEventListener('mouseup', onMouseUp);\n        };\n    });\n\n    const onMouseMove = (e) => {\n        const rect = e.target.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        window.document.body.style.cursor = 'auto';\n\n        const hitTargetKeyX = Math.floor(x / xBinSize);\n        const hitTargetKeyY = Math.floor(y / yBinSize);\n\n        if (hitMap[hitTargetKeyX] && hitMap[hitTargetKeyX][hitTargetKeyY]) {\n            for (const hitTarget of hitMap[hitTargetKeyX][hitTargetKeyY]) {\n                if (\n                    hitTarget.x <= x &&\n                    x <= hitTarget.x + hitTarget.w &&\n                    hitTarget.y <= y &&\n                    y <= hitTarget.y + hitTarget.h\n                ) {\n                    window.document.body.style.cursor = 'pointer';\n                }\n            }\n        }\n\n        if (props.onCellWidthChange && y < columnHeaderHeight) {\n            let xx = rowHeaderWidth;\n            for (const col of visibleColumns) {\n                if (Math.abs(xx - x) < resizeColumnRowMouseThreshold) {\n                    window.document.body.style.cursor = 'col-resize';\n                    break;\n                }\n                xx += cellWidth(col);\n            }\n        }\n\n        if (props.onCellHeightChange && x < rowHeaderWidth) {\n            let yy = columnHeaderHeight;\n            for (const row of visibleRows) {\n                if (Math.abs(yy - y) < resizeColumnRowMouseThreshold) {\n                    window.document.body.style.cursor = 'row-resize';\n                    break;\n                }\n                yy += cellHeight(row);\n            }\n        }\n\n        if (Math.abs(x - knobCoordinates.x) < knobSize && Math.abs(y - knobCoordinates.y) < knobSize) {\n            window.document.body.style.cursor = 'crosshair';\n        }\n\n        if (columnResize) {\n            if (props.onCellWidthChange) {\n                const newWidth = Math.max(columnResize.oldWidth + x - columnResize.startX, minimumColumnWidth);\n                props.onCellWidthChange(columnResize.colIdx, newWidth);\n            }\n            return;\n        }\n\n        if (rowResize) {\n            if (props.onCellHeightChange) {\n                const newHeight = Math.max(rowResize.oldHeight + y - rowResize.startY, minimumRowHeight);\n                props.onCellHeightChange(rowResize.rowIdx, newHeight);\n            }\n            return;\n        }\n\n        if (selectionInProgress) {\n            const sel2 = absCoordianteToCell(x, y);\n            if (rowSelectionInProgress) {\n                changeSelection(selection.x1, selection.y1, selection.x2, sel2.y, false);\n            } else if (columnSelectionInProgress) {\n                changeSelection(selection.x1, selection.y1, sel2.x, selection.y2, false);\n            } else {\n                changeSelection(selection.x1, selection.y1, sel2.x, sel2.y);\n            }\n        }\n\n        if (knobDragInProgress) {\n            window.document.body.style.cursor = 'crosshair';\n            const cell = absCoordianteToCell(x, y);\n\n            let x1 = selection.x1;\n            let y1 = selection.y1;\n            let x2 = selection.x2;\n            let y2 = selection.y2;\n            if (x1 > x2) {\n                x1 = selection.x2;\n                x2 = selection.x1;\n            }\n            if (y1 > y2) {\n                y1 = selection.y2;\n                y2 = selection.y1;\n            }\n\n            // check if vertical or horizontal\n            if (Math.abs(cell.x - (x1 + x2) * 0.5) < Math.abs(cell.y - (y1 + y2) * 0.5)) {\n                if (cell.y < y1) {\n                    y1 = cell.y;\n                } else {\n                    y2 = cell.y;\n                }\n            } else {\n                if (cell.x < x1) {\n                    x1 = cell.x;\n                } else {\n                    x2 = cell.x;\n                }\n            }\n            setKnobArea({ x1: x1, y1: y1, x2: x2, y2: y2 });\n        }\n    };\n\n    const onDoubleClick = (e) => {\n        const rect = e.target.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        const editCell = absCoordianteToCell(x, y);\n        setArrowKeyCommitMode(false);\n        startEditingCell(editCell);\n    };\n\n    const onKeyDown = (e) => {\n        if (e.key === 'Escape') {\n            setEditCell({ x: -1, y: -1 });\n            return;\n        }\n        if (e.key === 'Enter') {\n            commitEditingCell();\n            changeSelection(selection.x1, selection.y1 + 1, selection.x1, selection.y1 + 1);\n        }\n        if (e.key === 'Tab') {\n            e.preventDefault();\n            commitEditingCell();\n            changeSelection(selection.x1 + 1, selection.y1, selection.x1 + 1, selection.y1);\n        }\n        if (arrowKeyCommitMode && ['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown'].includes(e.key)) {\n            e.preventDefault();\n            commitEditingCell();\n            let x1 = selection.x1;\n            let y1 = selection.y1;\n            let x2 = selection.x1;\n            let y2 = selection.y1;\n            if (e.key === 'ArrowRight') {\n                x1 = selection.x1 + 1;\n                x2 = selection.x1 + 1;\n            } else if (e.key === 'ArrowLeft') {\n                x1 = selection.x1 - 1;\n                x2 = selection.x1 - 1;\n            } else if (e.key === 'ArrowUp') {\n                y1 = selection.y1 - 1;\n                y2 = selection.y1 - 1;\n            } else if (e.key === 'ArrowDown') {\n                y1 = selection.y1 + 1;\n                y2 = selection.y1 + 1;\n            }\n            changeSelection(x1, y1, x2, y2);\n        }\n    };\n\n    const onGridKeyDown = (e) => {\n        if (editMode && arrowKeyCommitMode && ['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown'].includes(e.key)) {\n            commitEditingCell();\n            return;\n        }\n\n        if (e.key === 'Shift') {\n            setShiftKeyDown(true);\n            return;\n        }\n\n        if ((e.metaKey || e.ctrlKey) && String.fromCharCode(e.which).toLowerCase() === 'v') {\n            return;\n        }\n\n        // copy\n        if ((e.metaKey || e.ctrlKey) && String.fromCharCode(e.which).toLowerCase() === 'c') {\n            return;\n        }\n\n        if (e.key === 'Backspace' || e.key === 'Delete') {\n            let x1 = selection.x1;\n            let y1 = selection.y1;\n            let x2 = selection.x2;\n            let y2 = selection.y2;\n            if (x1 > x2) {\n                x1 = selection.x2;\n                x2 = selection.x1;\n            }\n            if (y1 > y2) {\n                y1 = selection.y2;\n                y2 = selection.y1;\n            }\n            const changes = [];\n            for (let y = y1; y <= y2; y++) {\n                for (let x = x1; x <= x2; x++) {\n                    changes.push({ x: x, y: y, value: null });\n                }\n            }\n            if (props.onChange) {\n                props.onChange(changes);\n            }\n            return;\n        }\n\n        // nothing selected\n        if (selection.x1 === -1 || selection.x2 === -1 || selection.y1 === -1 || selection.y2 === -1) {\n            return;\n        }\n\n        if (\n            (e.keyCode >= 48 && e.keyCode <= 57) ||\n            (e.keyCode >= 96 && e.keyCode <= 105) ||\n            (e.keyCode >= 65 && e.keyCode <= 90) ||\n            e.key === 'Enter' ||\n            e.key === '-' ||\n            e.key === '.' ||\n            e.key === ','\n        ) {\n            if (cellReadOnly(selection.x1, selection.y1)) {\n                e.preventDefault(); // so we dont get keystrokes inside the text area\n                return;\n            }\n\n            startEditingCell({ x: selection.x1, y: selection.y1 });\n            setArrowKeyCommitMode(e.key !== 'Enter');\n            return;\n        }\n\n        if (['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown'].includes(e.key)) {\n            let sel1 = { x: selection.x1, y: selection.y1 };\n            let sel2 = { x: selection.x2, y: selection.y2 };\n\n            if (e.key === 'ArrowRight' || e.key === 'Tab') {\n                sel2.x += 1;\n            } else if (e.key === 'ArrowLeft') {\n                sel2.x -= 1;\n            } else if (e.key === 'ArrowUp') {\n                sel2.y -= 1;\n            } else if (e.key === 'ArrowDown') {\n                sel2.y += 1;\n            }\n            if (sel2.x < 0) {\n                sel2.x = 0;\n            }\n            if (sel2.y < 0) {\n                sel2.y = 0;\n            }\n            if (!e.shiftKey) {\n                sel1 = { ...sel2 };\n            }\n            changeSelection(sel1.x, sel1.y, sel2.x, sel2.y);\n            return;\n        }\n        e.preventDefault();\n    };\n\n    const onGridKeyUp = (e) => {\n        setShiftKeyDown(e.shiftKey);\n    };\n\n    const onContextMenu = (e) => {\n        if (!props.onRightClick) {\n            return;\n        }\n        const rect = e.target.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        const cell = absCoordianteToCell(x, y);\n        e.cellX = cell.x;\n        e.cellY = cell.y;\n\n        if (y > columnHeaderHeight && x > rowHeaderWidth) {\n            onMouseMove(e);\n            props.onRightClick(e);\n        }\n    };\n\n    const editMode = editCell.x !== -1 && editCell.y !== -1;\n    let editTextPosition = { x: 0, y: 0 };\n    let editTextWidth = 0;\n    let editTextHeight = 0;\n    let editTextTextAlign = 'right';\n    if (editMode) {\n        editTextPosition = cellToAbsCoordinate(editCell.x, editCell.y);\n        const style = cellStyle(editCell.x, editCell.y);\n        // add 1 so it doesnt cover the selection border\n        editTextPosition.x += 1;\n        editTextPosition.y += 1;\n        editTextWidth = cellWidth(editCell.x) - 2;\n        editTextHeight = cellHeight(editCell.y) - 2;\n        editTextTextAlign = style.textAlign || defaultCellStyle.textAlign;\n    }\n\n    return (\n        <div style={{ position: 'relative', height: '100%' }}>\n            <canvas\n                style={{\n                    width: 'calc(100% - 14px)',\n                    height: 'calc(100% - 15px)',\n                    outline: '1px solid #ddd', // find another better solution ?\n                }}\n                ref={canvasRef}\n            />\n            <div\n                ref={overlayRef}\n                onDoubleClick={onDoubleClick}\n                onMouseDown={onMouseDown}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onContextMenu={onContextMenu}\n                onScroll={onScroll}\n                className={styles.sheetscroll}\n                style={{\n                    position: 'absolute',\n                    width: '100%',\n                    height: '100%',\n                    top: 0,\n                    left: 0,\n                    overflow: 'scroll',\n                    borderBottom: '1px solid #ddd',\n                }}\n            >\n                <div\n                    style={{\n                        position: 'absolute',\n                        left: 0,\n                        top: 0,\n                        width: 1,\n                        height: maxScroll.y + 2000,\n                        backgroundColor: 'rgba(0,0,0,0.0)',\n                    }}\n                ></div>\n                <div\n                    style={{\n                        position: 'absolute',\n                        left: 0,\n                        top: 0,\n                        width: maxScroll.x + 5000,\n                        height: 1,\n                        backgroundColor: 'rgba(0,0,0,0.0)',\n                    }}\n                ></div>\n            </div>\n            <textarea\n                style={{ position: 'absolute', top: 0, left: 0, width: 1, height: 1, opacity: 0.01 }}\n                ref={copyPasteTextAreaRef}\n                onFocus={(e) => e.target.select()}\n                autoFocus\n                tabIndex=\"0\"\n                onKeyDown={onGridKeyDown}\n                onKeyUp={onGridKeyUp}\n            ></textarea>\n\n            {editMode && (\n                <input\n                    type=\"text\"\n                    onFocus={(e) => e.target.select()}\n                    autoFocus\n                    onKeyDown={onKeyDown}\n                    value={editValue}\n                    onChange={(e) => setEditValue(e.target.value)}\n                    style={{\n                        position: 'absolute',\n                        top: editTextPosition.y,\n                        left: editTextPosition.x,\n                        width: editTextWidth,\n                        height: editTextHeight,\n                        outline: 'none',\n                        border: 'none',\n                        textAlign: editTextTextAlign,\n                        color: 'black',\n                        fontSize: defaultCellStyle.fontSize,\n                        fontFamily: 'sans-serif',\n                    }}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default Sheet;\n","import React from 'react';\nimport Sheet from 'sheet-happens';\nimport 'sheet-happens/dist/index.css';\n\nimport { useState } from 'React';\n\nconst initialDataBig = [];\nfor (let row = 0; row < 1000; row++) {\n    const r = [];\n    for (let col = 0; col < 100; col++) {\n        r.push(`Row: ${row}, Col: ${col}`);\n    }\n    initialDataBig.push(r);\n}\n\nconst initialDataBasic = [\n    ['First', 'Second', 'Third', 'Fourth', 'Fifth', 'Sixth'],\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5, 6],\n];\n\nconst initialDataFormatting = [];\nfor (let row = 0; row < 1000; row++) {\n    const r = [];\n    for (let col = 0; col < 100; col++) {\n        r.push(Math.random() * 1000000);\n    }\n    initialDataFormatting.push(r);\n}\n\nexport function SheetBoxHeader() {\n    const [data, setData] = useState(initialDataBig);\n    const [cellWidth, setCellWidth] = useState(Array(100).fill(150));\n    const [cellHeight, setCellHeight] = useState([]);\n\n    const onSelectionChanged = (x1, y1, x2, y2) => {};\n    const onRightClick = () => {};\n    const columnHeaders = ['A', 'B', 'C'];\n    const cellStyle = (x, y) => {\n        return {};\n    };\n    const editData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const displayData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const sourceData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n\n    const onChange = (changes) => {\n        const newData = [...data];\n        for (const change of changes) {\n            if (!newData[change.y]) {\n                newData[change.y] = [];\n            }\n            newData[change.y][change.x] = change.value;\n        }\n        setData(newData);\n    };\n\n    const isReadOnly = (x, y) => {\n        return false;\n    };\n\n    const onCellWidthChange = (columnIdx, newWidth) => {\n        const cw = [...cellWidth];\n        if (columnIdx > cw.length) {\n            for (let i = cw.length; i <= columnIdx; i++) {\n                cw.push(150);\n            }\n        }\n        cw[columnIdx] = newWidth;\n        setCellWidth(cw);\n    };\n    const onCellHeightChange = (rowIdx, newHeight) => {\n        const ch = [...cellHeight];\n        if (rowIdx > ch.length) {\n            for (let i = ch.length; i <= rowIdx; i++) {\n                ch.push(22);\n            }\n        }\n        ch[rowIdx] = newHeight;\n        setCellHeight(ch);\n    };\n\n    return (\n        <div className=\"sheet-box\">\n            <Sheet\n                onSelectionChanged={onSelectionChanged}\n                onRightClick={onRightClick}\n                columnHeaders={columnHeaders}\n                cellStyle={cellStyle}\n                editData={editData}\n                displayData={displayData}\n                sourceData={sourceData}\n                cellWidth={cellWidth}\n                cellHeight={cellHeight}\n                onChange={onChange}\n                readOnly={isReadOnly}\n                onCellWidthChange={onCellWidthChange}\n                onCellHeightChange={onCellHeightChange}\n                freezeColumns={0}\n                freezeRows={0}\n            />\n        </div>\n    );\n}\n\nexport function SheetBoxBasic() {\n    const [data, setData] = useState(initialDataBasic);\n    const [cellWidth, setCellWidth] = useState([]);\n    const [cellHeight, setCellHeight] = useState([]);\n\n    const onSelectionChanged = (x1, y1, x2, y2) => {};\n    const onRightClick = () => {};\n    const columnHeaders = ['A', 'B', 'C'];\n    const cellStyle = (x, y) => {\n        return {};\n    };\n    const editData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const displayData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const sourceData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n\n    const onChange = (changes) => {\n        const newData = [...data];\n        for (const change of changes) {\n            if (!newData[change.y]) {\n                newData[change.y] = [];\n            }\n            newData[change.y][change.x] = change.value;\n        }\n        setData(newData);\n    };\n\n    const isReadOnly = (x, y) => {\n        return false;\n    };\n\n    const onCellWidthChange = (columnIdx, newWidth) => {\n        const cw = [...cellWidth];\n        if (columnIdx > cw.length) {\n            for (let i = cw.length; i <= columnIdx; i++) {\n                cw.push(100);\n            }\n        }\n        cw[columnIdx] = newWidth;\n        setCellWidth(cw);\n    };\n    const onCellHeightChange = (rowIdx, newHeight) => {\n        const ch = [...cellHeight];\n        if (rowIdx > ch.length) {\n            for (let i = ch.length; i <= rowIdx; i++) {\n                ch.push(22);\n            }\n        }\n        ch[rowIdx] = newHeight;\n        setCellHeight(ch);\n    };\n\n    return (\n        <div className=\"sheet-box\">\n            <Sheet\n                onSelectionChanged={onSelectionChanged}\n                onRightClick={onRightClick}\n                columnHeaders={columnHeaders}\n                cellStyle={cellStyle}\n                editData={editData}\n                displayData={displayData}\n                sourceData={sourceData}\n                cellWidth={cellWidth}\n                cellHeight={cellHeight}\n                onChange={onChange}\n                readOnly={isReadOnly}\n                onCellWidthChange={onCellWidthChange}\n                onCellHeightChange={onCellHeightChange}\n                freezeColumns={0}\n                freezeRows={0}\n            />\n        </div>\n    );\n}\n\nexport function SheetBoxStyle() {\n    const [data, setData] = useState(initialDataBasic);\n    const [cellWidth, setCellWidth] = useState([]);\n    const [cellHeight, setCellHeight] = useState([]);\n\n    const onSelectionChanged = (x1, y1, x2, y2) => {};\n    const onRightClick = () => {};\n    const columnHeaders = [];\n    const colors = ['#f00', '#0f0', '#00f', '#000'];\n    const alignment = ['left', 'right', 'center'];\n    const weight = ['normal ', 'bold ', 'lighter '];\n    const marginRight = [0, 0, 0, 0, 20];\n    const cellStyle = (x, y) => {\n        if (x === 0 || y === 0) {\n            return {\n                fillColor: '#6DA2FB22',\n            };\n        }\n        return {\n            color: colors[y % 4],\n            textAlign: alignment[x % 3],\n            marginRight: marginRight[x % 5],\n            weight: weight[y % 3],\n        };\n    };\n    const editData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const displayData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const sourceData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n\n    const onChange = (changes) => {\n        const newData = [...data];\n        for (const change of changes) {\n            if (!newData[change.y]) {\n                newData[change.y] = [];\n            }\n            newData[change.y][change.x] = change.value;\n        }\n        setData(newData);\n    };\n\n    const isReadOnly = (x, y) => {\n        return false;\n    };\n\n    const onCellWidthChange = (columnIdx, newWidth) => {\n        const cw = [...cellWidth];\n        if (columnIdx > cw.length) {\n            for (let i = cw.length; i <= columnIdx; i++) {\n                cw.push(100);\n            }\n        }\n        cw[columnIdx] = newWidth;\n        setCellWidth(cw);\n    };\n    const onCellHeightChange = (rowIdx, newHeight) => {\n        const ch = [...cellHeight];\n        if (rowIdx > ch.length) {\n            for (let i = ch.length; i <= rowIdx; i++) {\n                ch.push(22);\n            }\n        }\n        ch[rowIdx] = newHeight;\n        setCellHeight(ch);\n    };\n\n    return (\n        <div className=\"sheet-box\">\n            <Sheet\n                onSelectionChanged={onSelectionChanged}\n                onRightClick={onRightClick}\n                columnHeaders={columnHeaders}\n                cellStyle={cellStyle}\n                editData={editData}\n                displayData={displayData}\n                sourceData={sourceData}\n                cellWidth={cellWidth}\n                cellHeight={cellHeight}\n                onChange={onChange}\n                readOnly={isReadOnly}\n                onCellWidthChange={onCellWidthChange}\n                onCellHeightChange={onCellHeightChange}\n                freezeColumns={1}\n                freezeRows={1}\n            />\n        </div>\n    );\n}\n\nexport function SheetBoxFormatting() {\n    const [data, setData] = useState(initialDataFormatting);\n    const [cellWidth, setCellWidth] = useState([]);\n    const [cellHeight, setCellHeight] = useState([]);\n\n    const cellStyle = (x, y) => {\n        return {};\n    };\n    const editData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const displayData = (x, y) => {\n        return data?.[y]?.[x]?.toFixed(2);\n    };\n    const sourceData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n\n    const onChange = (changes) => {\n        const newData = [...data];\n        for (const change of changes) {\n            if (!newData[change.y]) {\n                newData[change.y] = [];\n            }\n            newData[change.y][change.x] = change.value;\n        }\n        setData(newData);\n    };\n\n    const isReadOnly = (x, y) => {\n        return false;\n    };\n\n    const onCellWidthChange = (columnIdx, newWidth) => {\n        const cw = [...cellWidth];\n        if (columnIdx > cw.length) {\n            for (let i = cw.length; i <= columnIdx; i++) {\n                cw.push(100);\n            }\n        }\n        cw[columnIdx] = newWidth;\n        setCellWidth(cw);\n    };\n    const onCellHeightChange = (rowIdx, newHeight) => {\n        const ch = [...cellHeight];\n        if (rowIdx > ch.length) {\n            for (let i = ch.length; i <= rowIdx; i++) {\n                ch.push(22);\n            }\n        }\n        ch[rowIdx] = newHeight;\n        setCellHeight(ch);\n    };\n\n    return (\n        <div className=\"sheet-box\">\n            <Sheet\n                cellStyle={cellStyle}\n                editData={editData}\n                displayData={displayData}\n                sourceData={sourceData}\n                cellWidth={cellWidth}\n                cellHeight={cellHeight}\n                onChange={onChange}\n                readOnly={isReadOnly}\n                onCellWidthChange={onCellWidthChange}\n                onCellHeightChange={onCellHeightChange}\n                freezeColumns={0}\n                freezeRows={0}\n            />\n        </div>\n    );\n}\n","import React from 'react';\nimport { useRef, useState } from 'react';\nimport { SheetBoxHeader } from './SheetBox';\nimport GitIcon from '../assets/git.svg';\n\nfunction Header() {\n    const textAreaRef = useRef(null);\n    const [copySuccess, setCopySuccess] = useState('');\n\n    const copyToClipboard = (e) => {\n        textAreaRef.current.select();\n        document.execCommand('copy');\n        e.target.focus();\n        setCopySuccess('Copied!');\n        setTimeout(() => {\n            setCopySuccess('');\n        }, 1000);\n    };\n\n    return (\n        <div className=\"container blue-bg\" id=\"home\">\n            <div className=\"content flex-row header\">\n                <div className=\"box text-box\">\n                    <div>\n                        <h1>Beautiful and fast spreadsheet component for React</h1>\n                        <p className=\"lightblue-p\">\n                            Sheet Happens is easy to implement and extend. \n                            <br></br>\n                            And it's super fast.\n                        </p>\n                    </div>\n                    <div className=\"lib-box\">\n                        <div className=\"install-box\" onClick={copyToClipboard}>\n                            <input readOnly ref={textAreaRef} value=\"npm install --save sheet-happens\" />\n                            {copySuccess !== '' && <div className=\"copy-success\">{copySuccess}</div>}\n                        </div>\n                        <a href=\"https://github.com/farseerdev/sheet-happens\" className=\"git-box\" target=\"_blank\">\n                            <img src={GitIcon} alt=\"Git\" />\n                            view on github\n                        </a>\n                    </div>\n                </div>\n                <div className=\"box\">\n                    <SheetBoxHeader />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","import React from 'react';\n\nfunction TitleSeparator({ title, id }) {\n    return (\n        <div className=\"title-separator\" id={id ? id : ''}>\n            <p>{title ? title : 'No title'}</p>\n            <div className=\"separator\"></div>\n        </div>\n    );\n}\n\nexport default TitleSeparator;\n","import React from 'react';\n\nfunction Wrap({ children }) {\n    return (\n        <div className=\"container\">\n            <div className=\"content flex-row\">{children}</div>\n        </div>\n    );\n}\n\nexport default Wrap;\n","import React from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { xcode } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nfunction Code() {\n    return (\n        <SyntaxHighlighter language=\"javascript\" style={xcode}>\n            {`function SheetBox() {\n    const [data, setData] = useState(initialData);\n    const [cellWidth, setCellWidth] = useState([]);\n    const [cellHeight, setCellHeight] = useState([]);\n\n    const onSelectionChanged = (x1, y1, x2, y2) => {};\n    const onRightClick = () => {};\n    const columnHeaders = ['A', 'B', 'C'];\n    const cellStyle = (x, y) => {\n        return {};\n    };\n    const editData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const displayData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const sourceData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n\n    const onChange = (changes) => {\n        const newData = [...data];\n        for (const change of changes) {\n            if (!newData[change.y]) {\n                newData[change.y] = [];\n            }\n            newData[change.y][change.x] = change.value;\n        }\n        setData(newData);\n    };\n\n    const isReadOnly = (x, y) => {\n        return false;\n    };\n\n    const onCellWidthChange = (columnIdx, newWidth) => {\n        const cw = [...cellWidth];\n        if (columnIdx > cw.length) {\n            for (let i = cw.length; i <= columnIdx; i++) {\n                cw.push(100);\n            }\n        }\n        cw[columnIdx] = newWidth;\n        setCellWidth(cw);\n    };\n    const onCellHeightChange = (rowIdx, newHeight) => {\n        const ch = [...cellHeight];\n        if (rowIdx > ch.length) {\n            for (let i = ch.length; i <= rowIdx; i++) {\n                ch.push(22);\n            }\n        }\n        ch[rowIdx] = newHeight;\n        setCellHeight(ch);\n    };\n\n    return (\n        <div className=\"sheet-box\">\n            <Sheet\n                onSelectionChanged={onSelectionChanged}\n                onRightClick={onRightClick}\n                columnHeaders={columnHeaders}\n                cellStyle={cellStyle}\n                editData={editData}\n                displayData={displayData}\n                sourceData={sourceData}\n                cellWidth={cellWidth}\n                cellHeight={cellHeight}\n                onChange={onChange}\n                readOnly={isReadOnly}\n                onCellWidthChange={onCellWidthChange}\n                onCellHeightChange={onCellHeightChange}\n                freezeColumns={0}\n                freezeRows={0}\n            />\n        </div>\n    );\n}`}\n        </SyntaxHighlighter>\n    );\n}\n\nexport default Code;\n","import React from 'react';\n\nfunction Footer() {\n    return (\n        <div className=\"footer\">\n            <p className=\"copy\">made by <a href=\"https://www.farseer.io\">farseer</a></p>\n        </div>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\nimport './index.css';\n\nimport Menu from './components/Menu';\nimport Header from './components/Header';\nimport TitleSeparator from './components/TitleSeparator';\nimport Wrap from './components/Wrap';\nimport Code from './components/Code';\nimport { SheetBoxStyle, SheetBoxBasic, SheetBoxFormatting } from './components/SheetBox';\nimport Footer from './components/Footer';\n\nconst App = () => {\n    return (\n        <>\n            <Menu />\n            <Header />\n\n            <TitleSeparator title=\"usage\" id=\"usage\" />\n            <Wrap>\n                <div className=\"box full-width\" style={{ overflowX: 'auto' }}>\n                    <Code />\n                </div>\n            </Wrap>\n\n            <TitleSeparator title=\"Let me show you its features\" id=\"features\" />\n            <Wrap>\n                <div className=\"box\">\n                    <SheetBoxBasic />\n                </div>\n                <div className=\"box\">\n                    <h3>Basic spreadsheet</h3>\n                    <p>\n                        It has all the features you'd expect from the spreadsheet: keyboard navigation, copy cells by\n                        dragging the small square, copy/paste from and to Excel and Google Sheets, resize columns and\n                        rows.\n                    </p>\n                </div>\n            </Wrap>\n            <Wrap>\n                <div className=\"box\">\n                    <SheetBoxStyle />\n                </div>\n                <div className=\"box\">\n                    <h3>Styling</h3>\n                    <p>\n                        You can change the cell color, alignment, font weight, margins and more. It's also possible to freeze first rows or columns.\n                    </p>\n                </div>\n            </Wrap>\n            <Wrap>\n                <div className=\"box\">\n                    <SheetBoxFormatting />\n                </div>\n                <div className=\"box\">\n                    <h3>Formatting</h3>\n                    <p>\n                        Sheet Happens uses different datasets for display and edit so you can apply different formatting when displaying the cell and editing the cell.\n                    </p>\n                </div>\n            </Wrap>\n\n            <TitleSeparator title=\"documentation\" id=\"documentation\" />\n            <Wrap>\n                <div className=\"box full-width\">\n                    <p>Comming soon</p>\n                </div>\n            </Wrap>\n\n            <Footer />\n        </>\n    );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}