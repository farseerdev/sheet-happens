{"version":3,"sources":["assets/logo.svg","assets/git.svg","components/Menu.js","../../src/index.tsx","components/SheetBox.js","components/Header.js","components/TitleSeparator.js","components/Wrap.js","components/Code.js","components/Footer.js","App.js","index.js"],"names":["module","exports","Menu","scrollTo","elId","element","document","getElementById","headerOffset","offsetPosition","window","pageYOffset","getBoundingClientRect","top","behavior","className","src","Logo","alt","onClick","defaultCellStyle","textAlign","fontSize","marginRight","marginLeft","color","fontFamily","weight","fillColor","backgroundColor","defaultColumnHeaderStyle","resizeCanvas","canvas","height","devicePixelRatio","ratio","newCanvasWidth","Math","width","newCanvasHeight","context","createRowOrColumnPropFunction","Array","rowOrColIndex","rowColProp","createCellPropFunction","x","y","cellProp","drawCell","cellContent","finalStyle","optionalStyle","style","xx","xCoord","cellWidth","yy","yCoord","cellHeight","obj","calculateRowsOrColsSizes","visible","start","end","prev","freezeCount","startingSize","size","ind","startingIndex","index","excelHeaderString","num","s","t","String","absCoordianteToCell","cellX","cellY","i","columnSizes","absX","rowSizes","absY","cellToAbsCoordinate","indX","dataOffset","indY","props","canvasRef","useRef","overlayRef","copyPasteTextAreaRef","useState","x1","y1","x2","y2","hitTarget","useResizeObserver","ref","canvasWidth","canvasHeight","freezeColumns","freezeRows","useMemo","columnHeaders","columnHeaderStyle","cellReadOnly","sourceData","displayData","editData","cellStyle","changeSelection","scrollToP2","setSelection","newDataOffset","newScrollLeft","newScrollTop","increment","newX","newY","setDataOffset","setTimeout","sx1","sy1","sx2","sy2","knobCoordinates","selection","selx2","sely2","c","hitMap","hitM","absX1","absY1","absX2","absY2","w","h","x1key","x2key","y1key","y2key","xkey","xbin","ykey","useEffect","animationFrameId","yCoord1","xCoord1","f","hideKnob","selx1","sely1","selectionActive","p1","p2","currentCol","currentRow","startX","startY","rowHeaderWidth","row","cw","ch","chcontent","col","kx1","knobArea","kx2","ky1","ky2","knobPoint1","knobPoint2","knobSize","renderOnCanvas","setFocusToTextArea","preventScroll","setCopyPasteText","activeTagName","onPaste","e","clipboardData","types","pastedHtml","parsePastedHtml","text","parsePastedText","findTable","child","maybeTable","html","div","pasteLocX","pasteLocY","changes","tableNode","tableChild","tr","td","value","innerHTML","rows","pasteX2","pasteY2","cols","dy1","dy2","dx1","dx2","cptext","commitEditingCell","editCell","editValue","setEditCell","startEditingCell","editDataValue","val","setEditValue","onMouseUp","fx1","fy1","fx2","fy2","srcY","srcX","setSelectionInProgress","setRowSelectionInProgress","setColumnSelectionInProgress","setKnobDragInProgress","setColumnResize","setRowResize","buttonClickMouseDownCoordinates","rect","setButtonClickMouseDownCoordinates","onMouseMove","hitTargetKeyX","hitTargetKeyY","newWidth","columnResize","newHeight","rowResize","sel2","columnSelectionInProgress","cell","setKnobArea","editMode","editTextPosition","editTextWidth","editTextHeight","editTextTextAlign","position","outline","onDoubleClick","setArrowKeyCommitMode","onMouseDown","oldWidth","colIdx","oldHeight","rowIdx","sel1","shiftKeyDown","onMouseLeave","onContextMenu","ev","onScroll","newMaxScroll","maxScroll","setMaxScroll","styles","left","overflow","borderBottom","opacity","onFocus","tabIndex","onKeyDown","includes","setShiftKeyDown","onKeyUp","type","autoFocus","arrowKeyCommitMode","onChange","border","initialDataBig","r","push","initialDataBasic","initialDataFormatting","random","SheetBoxHeader","data","setData","fill","setCellWidth","setCellHeight","onSelectionChanged","onRightClick","newData","change","readOnly","onCellWidthChange","columnIdx","length","onCellHeightChange","SheetBoxBasic","JSON","parse","stringify","SheetBoxStyle","colors","alignment","SheetBoxFormatting","toFixed","Number","SheetBoxVeryBigData","loadingStatus","setLoadingStatus","href","preventDefault","fetch","then","response","json","dataset","toString","padStart","g","b","Header","textAreaRef","copySuccess","setCopySuccess","id","current","select","execCommand","target","focus","GitIcon","TitleSeparator","title","Wrap","children","Code","language","xcode","Footer","App","overflowX","ReactDOM","render"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,6JCkC5BC,MA/Bf,WACI,MAAMC,EAAYC,IACd,IAAIC,EAAUC,SAASC,eAAeH,GAClCI,EAAwB,SAATJ,EAAkB,EAAI,GAErCK,EADkBC,OAAOC,YAAcN,EAAQO,wBAAwBC,IACpCL,EAEvCE,OAAOP,SAAS,CACXU,IAAKJ,EACLK,SAAU,YAInB,OACI,yBAAKC,UAAU,0BACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,YACX,yBAAKC,IAAKC,IAAMC,IAAI,SACpB,wBAAIH,UAAU,cAAd,oBAEJ,yBAAKA,UAAU,OACX,yBAAKA,UAAU,WAAWI,QAAS,IAAMhB,EAAS,SAAlD,QACA,yBAAKY,UAAU,WAAWI,QAAS,IAAMhB,EAAS,UAAlD,SACA,yBAAKY,UAAU,WAAWI,QAAS,IAAMhB,EAAS,aAAlD,YACA,yBAAKY,UAAU,WAAWI,QAAS,IAAMhB,EAAS,kBAAlD,qB,oECvBpB,MAmBMiB,EAAoC,CACtCC,UADsC,OAEtCC,SAFsC,GAGtCC,YAHsC,EAItCC,WAJsC,EAKtCC,MALsC,OAMtCC,WANsC,aAOtCC,OAPsC,GAQtCC,UARsC,GAStCC,gBAAiB,IAGfC,EAA4C,CAC9CT,UAD8C,SAE9CC,SAF8C,GAG9CC,YAH8C,EAI9CC,WAJ8C,EAK9CC,MAL8C,OAM9CC,WAN8C,aAO9CC,OAP8C,GAQ9CC,UAR8C,GAS9CC,gBAAiB,IAmFrB,SAASE,EAAaC,GAAtB,QAC8BA,EAA1B,wBAAM,EADV,EACU,MAASC,EADnB,EACmBA,OADnB,MAEI,OAAMC,iBAAkBC,OAF5B,MAEoC,EAFpC,EAGQA,EAAJ,IACIA,KAEJ,MAAMC,EAAiBC,WAAWC,EAAlC,GACMC,EAAkBF,WAAWJ,EAAnC,GAEA,GAAID,aAAmCA,WAAvC,EAA0E,CACtE,MAAMQ,EAAUR,aAAhB,MAMA,OALA,IACIA,UACAA,WACAQ,eAEJ,EAGJ,SAIJ,SAASC,EAAT,KAII,OAAIC,cAAJ,GACYC,GACAA,MAAsBA,EAAgBC,EAA1C,OACWA,EAAP,GAEA,EAGL,oBAAWA,EACd,EACOA,eAAJ,IAA2BA,EACvB,IAAP,EAEO,IAAP,EAIR,SAASC,EAAT,KAII,OAAIH,cAAJ,GACW,CAACI,EAAD,IACCC,MAAUA,EAAIC,EAAlB,QACQF,MAAUA,EAAIE,KAAlB,OACWA,KAAP,GAKJ,EAGL,oBAAWA,EACd,EACOA,eAAJ,IAAyBA,EACrB,IAAP,EAEO,IAAP,EAIR,SAASC,EAAS,EAAlB,eAUI,UAAIC,EACA,OAEJ,MAAMC,GAsFiBC,EAtFcC,EAsFzC,EAtFI,EAuFA,2BAAO,GAEAD,IAHX,IAA2BA,EAA3B,EArFIZ,YAAoBW,EAApBX,MACAA,OAAeW,aAA0BA,EAA1BA,eAAwDA,EAAvEX,WACAA,YAAoBW,EAApBX,UAEA,MAMMc,EAAKC,GALPJ,sBACMK,EAAYL,EADlBA,YAEMA,0BACAK,EACAL,EALV,YAOMM,EAAKC,EAAX,GAAoBC,EAapB,GAXAnB,SACAA,cACAA,gBACAA,SAEA,KAAIW,oBACAX,YAAoBW,EAApBX,gBACAA,oBACAA,YAAoBW,EAApBX,OAGuB,kBAAhBU,GAAX,kBAA8CA,EAC1CV,WAAiB,GAAjBA,YACG,qBAAWU,EAA0B,qBACtBA,EAAlB,OADwC,IACxC,2BAAqC,OAArC,EAAqC,QAC7BU,qBAAJ,iBACIpB,YAAkBoB,EAAlBpB,QAA+Be,EAASK,EAAxCpB,EAA+CiB,EAAKG,EAApDpB,EAA2DoB,EAA3DpB,MAAsEoB,EAAtEpB,QACG,kBAAWoB,EAAP,SACPpB,WAAiBoB,EAAjBpB,QAA8Be,EAASK,EAAvCpB,EAA8CiB,EAAKG,EAAnDpB,IALgC,+BAS5CA,YAGJ,SAASqB,EAAyB,EAAlC,SAOI,MAAMC,EAAN,GACMC,EAAN,GACMC,EAAN,GACA,IAAIC,EAAJ,EAEAF,UACAD,OAAaI,MAAbJ,GAEAG,EAAOE,EAD2BC,EAAlBF,MAAhB,GAEAF,UAEA,IAAIK,EAAMH,MAAsBI,EAAhC,EAEA,GAAIJ,EAAJ,EAAqB,CACjB,KAAOG,EAAP,EAA0BA,IACtBP,UACAC,UACAE,GAAcG,EAAdH,GACAD,UAEJK,EAAMhC,WAANgC,GAGJ,KACIP,UACAC,UACAE,GAAcG,EAAdH,GACAD,YACIA,EAAIA,SAAJA,IAAJ,IAGAK,IAEJ,MAAO,CACHE,MADG,UAGHP,OAWR,SAASQ,EAAkBC,GACvB,IAAIC,EAAJ,GACIC,EAAJ,EACA,KAAOF,EAAP,GACIE,GAAKF,EAAD,GAAJE,GACAD,EAAIE,oBAAoB,GAApBA,GAAJF,EACAD,GAAQA,EAAD,GAAD,GAANA,EAEJ,OAAOC,GAAP,GAGJ,SAASG,EAAoB,EAA7B,OAMI,IAAIC,EAAJ,EACIC,EAAJ,EAEA,IAAK,IAAIC,EAAT,EAAgBA,EAAIC,QAApB,OAA8CD,IAC1C,GAAIE,GAAQD,QAARC,IAAgCA,GAAQD,MAA5CD,GAAgE,CAC5DF,EAAQG,QAARH,GACA,MAGR,IAAK,IAAIE,EAAT,EAAgBA,EAAIG,QAApB,OAA2CH,IACvC,GAAII,GAAQD,QAARC,IAA6BA,GAAQD,MAAzCH,GAA0D,CACtDD,EAAQI,QAARJ,GACA,MAIR,MAAO,CAAEjC,EAAF,EAAYC,EAAGgC,GAG1B,SAASM,EAAoB,EAA7B,aASI,IAAIH,EAlVR,GAmVI,MAAMI,EAAOL,kBAA6BD,GAAMA,IAAhD,GACA,QAAIM,EACAJ,EAAOD,QAAPC,OACG,CACH,IAAK,IAAIF,EAAT,EAAgBA,EAAIO,EAApB,EAAkCP,IAC9BE,GAAQ1B,EAAR0B,GAEJ,IAAK,IAAIF,EAAT,EAAgBA,EAAhB,EAA2BA,IACvBE,GAAQ1B,EAAR0B,GAIR,IAAIE,EA3VR,GA4VI,MAAMI,EAAOL,kBAA0BH,GAAMA,IAA7C,GACA,QAAIQ,EACAJ,EAAOD,QAAPC,OACG,CACH,IAAK,IAAIJ,EAAT,EAAgBA,EAAIO,EAApB,EAAkCP,IAC9BI,GAAQzB,EAARyB,GAEJ,IAAK,IAAIJ,EAAT,EAAgBA,EAAhB,EAA2BA,IACvBI,GAAQzB,EAARyB,GAGR,MAAO,CAAEtC,EAAF,EAAWC,EAAGqC,G,MAsOzB,SAAeK,GACX,MAAMC,EAAYC,iBAAlB,MACMC,EAAaD,iBAAnB,MACME,EAAuBF,iBAA7B,MAHJ,EAIsCG,mBAAS,CAAEhD,EAAF,IAAWC,EAAG,MAJ7D,mBAIU,EAJV,KAIU,EAJV,OAKwC+C,mBAAS,CAAEhD,EAAF,EAAQC,EAAG,IAL5D,mBAKU,EALV,KAKU,EALV,OAMsC+C,mBAAS,CAAEC,IAAF,EAAUC,IAAV,EAAkBC,IAAlB,EAA0BC,IAAK,IAN9E,mBAMU,EANV,KAMU,EANV,OAOoCJ,mBAAS,CAAEC,IAAF,EAAUC,IAAV,EAAkBC,IAAlB,EAA0BC,IAAK,IAP5E,mBAOU,EAPV,KAOU,EAPV,OAQoCJ,mBAAS,CAAEhD,GAAF,EAASC,GAAI,IAR1D,mBAQU,EARV,KAQU,EARV,OASsC+C,mBAAlC,IATJ,mBASU,EATV,KASU,EATV,OAUwDA,oBAApD,GAVJ,mBAUU,EAVV,KAUU,EAVV,OAW4CA,oBAAxC,GAXJ,mBAWU,EAXV,KAWU,EAXV,OAYwDA,oBAApD,GAZJ,oBAYU,GAZV,MAYU,GAZV,SAa0DA,oBAAtD,GAbJ,qBAaU,GAbV,MAaU,GAbV,SAc4CA,mBAAxC,MAdJ,qBAcU,GAdV,MAcU,GAdV,SAesCA,mBAAlC,MAfJ,qBAeU,GAfV,MAeU,GAfV,SAgBgEA,oBAA5D,GAhBJ,qBAgBU,GAhBV,MAgBU,GAhBV,SAiBsEA,oBAAlE,GAjBJ,qBAiBU,GAjBV,MAiBU,GAjBV,SAkBkFA,mBAAc,CACxFhD,GADwF,EAExFC,GAFwF,EAGxFoD,UAAW,OArBnB,qBAkBU,GAlBV,MAkBU,GAlBV,SAuBuEC,YAAkB,CAAEC,IAAKX,IAvBhG,MAuBYpD,MAAOgE,QAvBnB,OAuBU,IAvBV,SAuBuCrE,OAAQsE,QAvB/C,OAuB8D,IAvB9D,GAyBUC,GAAgBf,iBAAtB,EACMgB,GAAahB,cAAnB,EAEMjC,GAAYkD,kBAAQ,IAAMjE,EAA8BgD,EAAD,UAApC,KAA4D,CAACA,EAAtF,YACM9B,GAAa+C,kBAAQ,IAAMjE,EAA8BgD,EAAD,WAApC,IAA4D,CAACA,EAAvF,aACMkB,GAAgBD,kBAAQ,IAAMjE,EAA8BgD,EAAD,cAApC,MAAiE,CAC1FA,EADJ,gBAGMmB,GAAoBF,kBAAQ,IAAMjE,EAA8BgD,EAAD,kBAApC,IAAmE,CAChGA,EADJ,oBAIMoB,GAAeH,kBAAQ,IAAM7D,EAAuB4C,EAAD,UAA7B,GAAsD,CAACA,EAAnF,WAEMqB,GAAaJ,kBAAQ,IAAM7D,EAAuB4C,EAAD,WAA7B,IAAqD,CAACA,EAAhF,aACMsB,GAAcL,kBAAQ,IAAM7D,EAAuB4C,EAAD,YAA7B,IAAsD,CAACA,EAAlF,cACMuB,GAAWN,kBAAQ,IAAM7D,EAAuB4C,EAAD,SAA7B,IAAmD,CAACA,EAA5E,WACMwB,GAAYP,kBAAQ,IAAM7D,EAAuB4C,EAAD,UAA7B,GAAkE,CAACA,EAA5F,YAEMR,GAAcyB,kBAChB,IAAM7C,EAAyB2C,GAAehD,GA9nBtD,GA8nBiF+B,EAA3C,EADP,IAEvB,CAACE,EAAD,iBAAiCF,EAAjC,EAFJ,KAKMJ,GAAWuB,kBACb,IAAM7C,EAAyB4C,GAAY9C,GA/nBnD,GA+nBmF4B,EAA7C,EADV,IAEpB,CAACE,EAAD,cAA+BF,EAA/B,EAFJ,KAKM2B,GAAkB,CAACnB,EAAD,MAAiDoB,GAAjD,KAGpB,GAFAC,EAAa,gBAAclB,OAE3B,EAAgB,CACZ,MAAMmB,EAAgB,CAAEvE,EAAGyC,EAAL,EAAmBxC,EAAGwC,EAAWxC,GACvD,IAAIuE,GAAJ,EACIC,GAAJ,EAEA,IAAKtC,kBAAD,IAAmCA,SAAkBA,gBAAlBA,KAAvC,EAA+F,CAC3F,MAAMuC,EAAYvC,SAAkBA,gBAAlBA,SAAlB,EACMwC,EAAOpF,SAASkD,EAATlD,MAAb,EACAgF,MACAC,EA1oBhB,GA0oBgCG,EAGpB,IAAKtC,kBAAD,IAAgCA,SAAeA,gBAAfA,KAApC,EAAsF,CAClF,MAAMqC,EAAYrC,SAAeA,gBAAfA,SAAlB,EACMuC,EAAOrF,SAASkD,EAATlD,MAAb,EACAgF,MACAE,EAjpBhB,GAipB+BG,EAGfL,MAAoB9B,EAApB8B,GAAoC9B,MAAiB8B,EAAzD,IACIM,EAAc,CAAE7E,EAAGuE,EAAL,EAAsBtE,EAAGsE,EAActE,IACrD6E,WAAW,KACHhC,EAAJ,WACI,IAAI0B,IACA1B,yBAEJ,IAAI2B,IACA3B,yBANZgC,IAaR,GAAInC,EAAJ,mBAA8B,CAC1B,IAAIoC,EAAJ,EACIC,EAAJ,EACIC,EAAJ,EACIC,EAAJ,EACIH,EAAJ,IACIA,IACAE,KAEAD,EAAJ,IACIA,IACAE,KAEJvC,gCAIFwC,GAAkBvB,kBAAQ,KAC5B,IAAIwB,WAAJ,IAA2BA,KAAqB,CAC5C,IAAIC,EAAQD,EAAZ,GACIA,KAAeA,EAAnB,KACIC,EAAQD,EAARC,IAGJ,IAAIC,EAAQF,EAAZ,GACIA,KAAeA,EAAnB,KACIE,EAAQF,EAARE,IAEJ,MAAMC,EAAIhD,EAAoB8C,EAAOC,EAAOjD,GAAUF,GAAaM,EAAY/B,GAA/E,IACA,MAAO,CAAEV,EAAGuF,IAAM7E,GAAX,GAA6BT,EAAGsF,IAAM1E,GAAWyE,IAE5D,MAAO,CAAEtF,GAAF,EAASC,GAAI,IACrB,CAACmF,EAAW/C,GAAUF,GAAaM,EAAY/B,GAflD,KAiBM8E,GAAS5B,kBAAQ,KACnB,MAAM6B,EAAN,GACMvG,EAAS0D,EAAf,QACA,MACI,SAEJ3D,KACA,IAAI2B,EAjtBZ,GA0sB2B,oBAQHyB,GAAhB,OARmB,IAQnB,2BAAgC,OAAhC,EAAgC,QAC5B,IAAI5B,EAvtBhB,GAstBwC,oBAEZ0B,GAAhB,OAF4B,IAE5B,2BAAmC,OAAnC,EAAmC,QACzB/B,EAAc6D,GAAYjE,EAAhC,GACA,GAAII,eAAJ,IAA4BA,EAA2B,CACnDK,GAAUC,GAAVD,GACA,SAGJ,MAAMD,EAAN,EACMG,EAAKC,EAAX,GAAoBC,MAEpB,GAAIjB,cAAJ,GAAgC,qBAC5B,GAD4B,IAC5B,2BAA+B,OAA/B,EAA+B,QAC3B,GAAIkB,EAAJ,QAAiB,CACb,MAAM4E,EAAQlF,EAAKM,EAAnB,EACM6E,EAAQhF,EAAKG,EAAnB,EACM8E,EAAQF,EAAQ5E,EAAtB,MACM+E,EAAQF,EAAQ7E,EAAtB,OAEMuC,EAAY,CACdrB,MADc,EAEdC,MAFc,EAGdjC,EAHc,EAIdC,EAJc,EAKd6F,EAAGhF,EALW,MAMdiF,EAAGjF,EANW,OAOdzC,QAASyC,EAAIzC,SAIX2H,EAAQzG,WAAWmG,EA9uBrD,IA+uBkCO,EAAQ1G,WAAWqG,EA/uBrD,IAivBkCM,EAAQ3G,WAAWoG,EAhvBrD,IAivBkCQ,EAAQ5G,WAAWsG,EAjvBrD,IAmvB4B,IAAK,IAAIO,EAAT,EAAuBA,GAAvB,EAAsCA,IAAQ,CACrCX,EAAL,KACIA,SAEJ,MAAMY,EAAOZ,EAAb,GACA,IAAK,IAAIa,EAAT,EAAuBA,GAAvB,EAAsCA,IAC7BD,EAAL,KACIA,SAEJA,gBAlCY,+BAwChC5F,GAAUC,GAAVD,IApDwB,8BAsD5BG,GAAUC,GAAVD,IA9De,8BAgEnB,UACD,CAACqD,GAAatB,EAAd,UAA+BA,EAA/B,WAAiDF,EAAjD,EAA+DA,EAjElE,IAmEA8D,oBAAU,KACN,MAAMrH,EAAS0D,EAAf,QACA,MACI,OAEJ,MAAMlD,EAAUR,aAAhB,MACA,MACI,OAEJ,IAAIsH,EAAmB5I,OAAA,sBAA6B,MA5a5D,SAAwB,EAAxB,yBAeIqB,EAAaS,EAAbT,QACAS,gBAAwBA,SAAxBA,MAA8CA,SAA9CA,QACAA,oBACAA,eAAuBA,SAAvBA,MAA6CA,SAA7CA,QAGA,IAAI+G,EA/XR,GA0WA,oBAsBoBpE,EAAhB,OAtBJ,IAsBI,2BAAgC,OAAhC,EAAgC,QAC5B,IAAIqE,EArYZ,GAoYoC,oBAEZvE,EAAhB,OAF4B,IAE5B,2BAAmC,OAAnC,EAAmC,QACzB5B,EAAQ4D,EAAUnE,EAAxB,GACIO,EAAJ,YACIb,YAAoBa,EAApBb,UACAA,eAAmCgB,EAAnChB,GAAiDmB,EAAjDnB,KAEJgH,GAAWhG,EAAXgG,IARwB,8BAU5BD,GAAW5F,EAAX4F,IAhCR,0BAAAE,IAmCI,IAAIC,GAAJ,EAEIC,EAAQzB,EAAZ,GACIC,EAAQD,EAAZ,GAEIA,KAAeA,EAAnB,KACIyB,EAAQzB,EAARyB,GACAxB,EAAQD,EAARC,IAGJ,IAAIyB,EAAQ1B,EAAZ,GACIE,EAAQF,EAAZ,GAEIA,KAAeA,EAAnB,KACI0B,EAAQ1B,EAAR0B,GACAxB,EAAQF,EAARE,IAGJ,MAAMyB,GAAkBF,YAAgBxB,IAAhBwB,IAAgCC,IAAxD,IAAwExB,EAElE0B,EAAKzE,EAAoBsE,EAAOC,EAAOzE,EAAUF,EAAaM,EAAY/B,EAAhF,GACMuG,EAAK1E,EAAoB8C,EAAOC,EAAOjD,EAAUF,EAAaM,EAAY/B,EAAhF,GAIA,GAHAuG,KAAQvG,EAARuG,GACAA,KAAQpG,EAARoG,GAEID,KAAQC,EAAZ,EAAkB,CAEdA,IAAOD,EAAPC,EACA,IAAIC,EAAJ,EACA,KAAO/E,iBAAP,IACI8E,KAAQvG,EAARuG,GACAC,IAEJN,KAGJ,GAAII,KAAQC,EAAZ,EAAkB,CAEdA,IAAOD,EAAPC,EACA,IAAIE,EAAJ,EACA,KAAO9E,iBAAP,IACI4E,KAAQpG,EAARoG,GACAE,IAEJP,KAIJ,IACIlH,YAtcR,UAucQA,WAAiBsH,EAAjBtH,EAAuBsH,EAAvBtH,EAA6BuH,IAAOD,EAApCtH,EAA0CuH,IAAOD,EAAjDtH,IAIJA,YAtcJ,UAucIA,eAxcJ,GAwc2CA,SAAvCA,QAGA,IACIA,YAzcR,UA0cQA,aAAoBsH,EAApBtH,EA7cR,GA6ckDuH,IAAOD,EAAjDtH,IAIJA,YAhdJ,UAidIA,eAAuBA,SAAvBA,MA9cJ,IAidI,IACIA,YAndR,UAodQA,WAAiBsH,EAAjBtH,IAA0BuH,IAAOD,EAAjCtH,EAndR,KAudIA,cA7dJ,UA8dIA,cACA,IAAI0H,EA7dR,GA8WA,oBAiHsBjF,EAAlB,OAjHJ,IAiHI,2BAAqC,OAArC,EAAqC,QACjCzC,cACAA,cACAA,WAAuBA,SAAvBA,QACAA,WACA0H,GAAU1G,EAAV0G,IAtHR,0BAAAT,IAyHI,IAAIU,EAneR,GA0WA,oBA0HsBhF,EAAlB,OA1HJ,IA0HI,2BAAkC,OAAlC,EAAkC,QAC9B3C,cACAA,cACAA,SAAeA,SAAfA,SACAA,WACA2H,GAAUxG,EAAVwG,IA/HR,0BAAAV,IAmIIU,EA7eJ,GA8eI3H,wBACAA,qBACAA,OAAepB,iBAAoCA,EAAnDoB,WACAA,YAnfJ,UA4WA,oBAwIsB2C,EAAlB,OAxIJ,IAwII,2BAAkC,OAAlC,EAAkC,QACxB7B,EAAK8G,GACL3G,EAAK0G,EAAX,GAAoBxG,KACdT,EAAcmH,EAApB,EACA7H,WAAiB,GAAjBA,OACA2H,GAAUxG,EAAVwG,IA7IR,0BAAAV,IAiJIS,EA/fJ,GAggBI1H,wBACAA,qBAnJJ,oBAoJsByC,EAAlB,OApJJ,IAoJI,2BAAqC,OAArC,EAAqC,QAC3BqF,EAAK9G,EAAX,GACM+G,EAAK5D,EAAX,GACM6D,EAAYD,WAAmB/F,EAAkBiG,EAAvD,GAEAxH,EAAST,EAASgI,EADF5D,EAAhB,GACsC9E,EAA0BoI,EAAQ,EAAGI,EAngBnF,IAogBQJ,MA1JR,0BAAAT,IAuKI,GATA,IACIjH,cAlhBR,UAmhBQA,cACAA,cACAA,OAAasH,EAAbtH,EAAmBsH,EAAnBtH,EAAyBuH,IAAOD,EAAhCtH,EAAsCuH,IAAOD,EAA7CtH,GACAA,YAIJ,EAAwB,CACpB,IAAIkI,EAAMC,EAAV,GACIC,EAAMD,EAAV,GACIA,KAAcA,EAAlB,KACID,EAAMC,EAAND,GACAE,EAAMD,EAANC,IAGJ,IAAIC,EAAMF,EAAV,GACIG,EAAMH,EAAV,GACIA,KAAcA,EAAlB,KACIE,EAAMF,EAANE,GACAC,EAAMH,EAANG,IAEJ,MAAMC,EAAa1F,EAAoBqF,EAAKG,EAAK1F,EAAUF,EAAaM,EAAY/B,EAApF,GACMwH,EAAa3F,EACfuF,EADkC,EAElCE,EAFkC,UAAtC,GASAtI,cA9iBR,UA+iBQA,cAAoB,CAAC,EAArBA,IACAA,cACAA,cACAA,OAAauI,EAAbvI,EAA2BuI,IAA3BvI,EAA6CwI,IAAeD,EAA5DvI,EAA0EwI,IAAeD,EAAzFvI,GACAA,WACAA,kBAIAqH,IAAJ,IACIrH,YA7jBR,UA8jBQA,WAAiBuH,IAAOkB,EAAgBlB,IAAOkB,EA5jBvD,MAgkBIzI,wBAGA,IAAIkB,EA5jBR,GA0WA,oBAmNoByB,EAAhB,OAnNJ,IAmNI,2BAAgC,OAAhC,EAAgC,QAC5B,IAAI5B,EAlkBZ,GAmkBQ,MAAMgH,EAAK5G,EAAX,GAF4B,oBAGZsB,EAAhB,OAH4B,IAG5B,2BAAmC,OAAnC,EAAmC,QACzB/B,EAAc6D,EAAYjE,EAAhC,GACMwH,EAAK9G,EAAX,GACA,GAAIN,eAAJ,IAA4BA,EAA2B,CAEnDD,EAAST,EAASU,EADJ+D,EAAUnE,EAAxB,GACsC,EAA9B,MAARG,GAEJM,MAVwB,8BAY5BG,MA/NR,0BAAA+F,KA6aYyB,CAAe,EAAD,+BAAdA,KAiBJ,MAAO,KACHxK,iCAEL,CAAC,EAAD,+BA9BH2I,IA8CA,MAAM8B,GAAqB,KACnBtF,EAAJ,UACIA,gBAAmC,CAAEuF,eAAe,IACpDvF,qBAIRwD,oBAAU,KACN,OAEI,GADAgC,KACI/K,yBAA2BuF,EAA/B,QACIsF,SACG,CACH,MAAMG,EAAiBhL,+BAAvB,cAGSgL,WAAD,SAA6BhL,wCAA7B,UACAgL,GADA,aAEAA,GAJR,WAKQA,GAGJH,QAMhB,MAAMI,GAAWC,IACb,MACI,OAEJ,GAAIA,WAAa3F,EAAjB,QACI,OAEJ2F,mBAEA,MAAMC,EAAgBD,iBAAoB9K,OAA1C,cACMgL,EAAQD,EAAd,MACA,GAAIC,WAAJ,aAAiC,CAC7B,MAAMC,EAAaF,UAAnB,aACAG,WACG,GAAIF,WAAJ,cAAkC,CACrC,MAAMG,EAAOJ,UAAb,cACAK,QAIRzC,oBAAU,KACN3I,6CACO,KACHA,mDAIR,MAAMqL,GAAa1L,IAAD,oBACMA,EAApB,UADc,IACd,2BAAsC,OAAtC,EAAsC,QAClC,aAAI2L,WACA,SAEJ,MAAMC,EAAaF,GAAnB,GACA,KACI,UAPM,gCAYZH,GAAmBM,IACrB,MAAMC,EAAM7L,uBAAZ,OACA6L,YAAgBD,EAAhBC,OACA,IAAIC,GAAJ,EACIC,GAAJ,EAaA,IAZInE,WAAJ,IAA2BA,OACvBkE,EAAYlE,EAAZkE,KAEAlE,WAAJ,IAA2BA,OACvBmE,EAAYnE,EAAZmE,KAEAnE,WAAJ,IAA2BA,OACvBkE,EAAY/J,SAAS6F,EAAT7F,GAAuB6F,EAAnCkE,MAEAlE,WAAJ,IAA2BA,OACvBmE,EAAYhK,SAAS6F,EAAT7F,GAAuB6F,EAAnCmE,MAEAD,QAAJ,IAAwBC,EACpB,OAGJ,IAAIvJ,EAAJ,EACIC,EAAJ,EACA,MAAMuJ,EAAN,GAEMC,EAAYR,GAAlB,GACA,MACI,OA3BgB,oBA8BKQ,EAAzB,UA9BoB,IA8BpB,2BAA6C,OAA7C,EAA6C,QACzC,aAAIC,WAAiC,qBAChBA,EAAjB,UADiC,IACjC,2BAAsC,OAAtC,EAAsC,QAElC,GADA1J,IACA,OAAI2J,WAAsB,qBACLA,EAAjB,UADsB,IACtB,2BAA8B,OAA9B,EAA8B,QAC1B,OAAIC,aACAJ,OAAa,CAAEvJ,EAAF,EAAQD,EAAR,EAAc6J,MAAOD,EAAGE,YACrC9J,MAJc,8BAOtBC,MAVyB,iCA/BrB,8BA+ChB0C,EAAJ,UACIA,cAIJyB,GAAgBkF,EAAWC,EAFbvJ,EAAd,EACcC,EAAd,GACAmE,IAGE4E,GAAmBD,IACrB,IAAIO,GAAJ,EACIC,GAAJ,EAaA,IAZInE,WAAJ,IAA2BA,OACvBkE,EAAYlE,EAAZkE,KAEAlE,WAAJ,IAA2BA,OACvBmE,EAAYnE,EAAZmE,KAEAnE,WAAJ,IAA2BA,OACvBkE,EAAY/J,SAAS6F,EAAT7F,GAAuB6F,EAAnCkE,MAEAlE,WAAJ,IAA2BA,OACvBmE,EAAYhK,SAAS6F,EAAT7F,GAAuB6F,EAAnCmE,MAEAD,QAAJ,IAAwBC,EACpB,OAGJ,MAAMQ,EAAOhB,QAAb,SACA,IAAIiB,EAAJ,EACIC,EAAUV,EAAYQ,EAAZR,OAAd,EACA,MAAMC,EAAN,GACA,IAAK,IAAIvJ,EAAT,EAAgBA,EAAI8J,EAApB,OAAiC9J,IAAK,CAClC,MAAMiK,EAAOH,WAAb,MAEIT,EAAYY,EAAZZ,SAAJ,IACIU,EAAUV,EAAYY,EAAZZ,OAAVU,GAEJ,IAAK,IAAIhK,EAAT,EAAgBA,EAAIkK,EAApB,OAAiClK,IAC7BwJ,OAAa,CAAEvJ,EAAGsJ,EAAL,EAAoBvJ,EAAGsJ,EAAvB,EAAsCO,MAAOK,EAAKlK,KAInE2C,EAAJ,UACIA,cAEJyB,GAAgBkF,EAAWC,EAAWS,EAASC,GAA/C7F,IAGEmE,GAAmB,KACrB,IAAInD,eAAuBA,OAAvBA,IAA8CA,OAAlD,IAAyEA,KACrE,OAGJ,IAAI+E,EAAM/E,EAAV,GACIgF,EAAMhF,EAAV,GACI+E,EAAJ,IACIA,EAAM/E,EAAN+E,GACAC,EAAMhF,EAANgF,IAGJ,IAAIC,EAAMjF,EAAV,GACIkF,EAAMlF,EAAV,GACIiF,EAAJ,IACIA,EAAMjF,EAANiF,GACAC,EAAMlF,EAANkF,IAGJ,MAAMP,EAAN,GACA,IAAK,IAAI9J,EAAT,EAAkBA,GAAlB,EAA4BA,IAAK,CAC7B,MAAMsH,EAAN,GACA,IAAK,IAAIvH,EAAT,EAAkBA,GAAlB,EAA4BA,IAAK,CAC7B,MAAM6J,EAAQ3F,GAASlE,EAAvB,GACI6J,eAAJ,IAAsBA,EAClBtC,UAEAA,WAGRwC,OAAUxC,OAAVwC,OAEJ,MAAMQ,EAASR,OAAf,MACIhH,EAAJ,UACIA,oBAIFyH,GAAoB,KAClB7H,EAAJ,UACIA,WAAe,CAAC,CAAE3C,EAAGyK,EAAL,EAAiBxK,EAAGwK,EAApB,EAAgCZ,MAAOa,KAG3DC,EAAY,CAAE3K,GAAF,EAASC,GAAI,KAGvB2K,GAAoBH,IACtB,GAAI1G,GAAa0G,EAAD,EAAaA,EAA7B,GACI,OAGJ,MAAMI,EAAgB3G,GAASuG,EAAD,EAAaA,EAA3C,GACA,IAAIK,EAAJ,GACID,eAAJ,IAA8BA,IAC1BC,KAEJH,KACAI,MAoIEC,GAAatC,IACf,MAAwB,CACpB,IAAI3D,EAAMK,EAAV,GACIH,EAAMG,EAAV,GACIA,KAAeA,EAAnB,KACIL,EAAMK,EAANL,GACAE,EAAMG,EAANH,IAEJ,IAAID,EAAMI,EAAV,GACIF,EAAME,EAAV,GACIA,KAAeA,EAAnB,KACIJ,EAAMI,EAANJ,GACAE,EAAME,EAANF,IAEJ,IAAI0C,EAAMC,EAAV,GACIC,EAAMD,EAAV,GACIA,KAAcA,EAAlB,KACID,EAAMC,EAAND,GACAE,EAAMD,EAANC,IAEJ,IAAIC,EAAMF,EAAV,GACIG,EAAMH,EAAV,GACIA,KAAcA,EAAlB,KACIE,EAAMF,EAANE,GACAC,EAAMH,EAANG,IAGJ,IAAIiD,EAAJ,EACIC,EAAJ,EACIC,EAAJ,EACIC,EAAJ,EAEA,MAAM5B,EAAN,GAEA,GAAI2B,MAAclG,EAAlB,EAA6B,CAErBiG,IAAJ,EACIA,EAAMhG,EAANgG,EAEAE,EAAMpG,EAANoG,EAGJ,IAAIC,EAAJ,EACA,IAAK,IAAIpL,EAAT,EAAkBA,GAAlB,EAA4BA,IAAK,CAC7B,IAAK,IAAID,EAAT,EAAkBA,GAAlB,EAA4BA,IAAK,CAC7B,MAAM6J,EAAQ7F,GAAWhE,EAAzB,GACAwJ,OAAa,CAAExJ,EAAF,EAAQC,EAAR,EAAc4J,MAAOA,IAEtCwB,KACIA,EAAJ,IACIA,UAGL,CAECJ,IAAJ,EACIA,EAAMhG,EAANgG,EAEAE,EAAMpG,EAANoG,EAEJ,IAAIG,EAAJ,EACA,IAAK,IAAItL,EAAT,EAAkBA,GAAlB,EAA4BA,IAAK,CAC7B,IAAK,IAAIC,EAAT,EAAkBA,GAAlB,EAA4BA,IAAK,CAC7B,MAAM4J,EAAQ7F,GAAWsH,EAAzB,GACA9B,OAAa,CAAExJ,EAAF,EAAQC,EAAR,EAAc4J,MAAOA,IAEtCyB,KACIA,EAAJ,IACIA,MAKR3I,EAAJ,UACIA,cAGJyB,GAAgByD,EAAD,GAAcA,EAAd,GAA2BA,EAA3B,GAAwCA,EAAvDzD,IASJ,GAPAmH,OACAC,OACAC,OACAC,OACAC,SACAC,UAGIC,eACAA,MAFJ,OAGIA,aACF,CACE,IAAKnD,EAAD,UAAeA,oBAAnB,SACI,OAEJ,MAAMoD,EAAOpD,SAAb,wBACM1I,EAAI0I,UAAYoD,EAAtB,KACM7L,EAAIyI,UAAYoD,EAAtB,IACMzI,EAAYwI,GAAlB,UAEIxI,QACArD,GAAKqD,IAAcA,EADnBA,GAEAA,KAFAA,GAGApD,GAAKoD,IAAcA,EAJvB,GAMIA,YAEJ0I,GAAmC,CAAE/L,GAAF,EAASC,GAAT,EAAgBoD,UAAW,SAItEkD,oBAAU,KACN3I,sCACO,KACHA,4CAIR,MAAMoO,GAAetD,IACjB,IAAKA,EAAD,UAAeA,oBAAnB,SACI,OAEJ,MAAMoD,EAAOpD,SAAb,wBACM1I,EAAI0I,UAAYoD,EAAtB,KACM7L,EAAIyI,UAAYoD,EAAtB,IAEAlO,yCAEA,MAAMqO,EAAgB1M,WAAWS,EAtxCzC,IAuxCckM,EAAgB3M,WAAWU,EAtxCzC,IAwxCQ,GAAIuF,OAAyBA,MAA7B,GAAmE,qBACvCA,MAAxB,IAD+D,IAC/D,2BAA8D,OAA9D,EAA8D,QAEtDnC,QACArD,GAAKqD,IAAcA,EADnBA,GAEAA,KAFAA,GAGApD,GAAKoD,IAAcA,EAJvB,IAMIzF,8CARuD,+BAanE,GAAI+E,qBAA2B1C,EAzyCvC,GAyyC+D,CACnD,IAAIO,EA9yChB,GA6yC+D,oBAEjC2B,GAAlB,OAFmD,IAEnD,2BAAqC,OAArC,EAAqC,QACjC,GAAI5C,SAASiB,EAATjB,GAtyCpB,EAsyCsE,CAClD3B,+CACA,MAEJ4C,GAAME,GAANF,IAP+C,+BAWvD,GAAImC,sBAA4B3C,EAxzCxC,GAwzC4D,CAChD,IAAIW,EArzChB,GAozC4D,oBAE9B0B,GAAlB,OAFgD,IAEhD,2BAAkC,OAAlC,EAAkC,QAC9B,GAAI9C,SAASoB,EAATpB,GAjzCpB,EAizCsE,CAClD3B,+CACA,MAEJ+C,GAAME,GAANF,IAP4C,+BAepD,GAJIpB,SAASS,EAAImF,GAAb5F,GAt0CZ,GAs0C0DA,SAASU,EAAIkF,GAAb5F,GAt0C1D,IAu0CY3B,+CAGJ,IACI,GAAI+E,EAAJ,kBAA6B,CACzB,MAAMwJ,EAAW5M,SAAS6M,cAA4BA,GAArC7M,OA9zCjC,IA+zCgBoD,oBAAwByJ,GAAxBzJ,gBAKR,OACI,GAAIA,EAAJ,mBAA8B,CAC1B,MAAM0J,EAAY9M,SAAS+M,eAA0BA,GAAnC/M,OAr0ClC,IAs0CgBoD,qBAAyB2J,GAAzB3J,eAHR,CAQA,MAAyB,CACrB,MAAM4J,EAAOxK,EAAoB/B,EAAGC,EAAGoC,GAAvC,IACA,GACI+B,GAAgBgB,EAAD,GAAeA,EAAf,GAA6BA,EAA7B,GAA2CmH,EAA3C,GAAfnI,GACOoI,GACPpI,GAAgBgB,EAAD,GAAeA,EAAf,GAA6BmH,EAA7B,EAAqCnH,EAArC,IAAfhB,GAEAA,GAAgBgB,EAAD,GAAeA,EAAf,GAA6BmH,EAA7B,EAAqCA,EAApDnI,GAIR,MAAwB,CACpBxG,8CACA,MAAM6O,EAAO1K,EAAoB/B,EAAGC,EAAGoC,GAAvC,IAEA,IAAIY,EAAKmC,EAAT,GACIlC,EAAKkC,EAAT,GACIjC,EAAKiC,EAAT,GACIhC,EAAKgC,EAAT,GACInC,EAAJ,IACIA,EAAKmC,EAALnC,GACAE,EAAKiC,EAALjC,IAEAD,EAAJ,IACIA,EAAKkC,EAALlC,GACAE,EAAKgC,EAALhC,IAIA7D,SAASkN,IAATlN,IAAmB0D,EAAD,IAAmB1D,SAASkN,IAAlD,IAA4DvJ,EAAD,IACnDuJ,IAAJ,EACIvJ,EAAKuJ,EAALvJ,EAEAE,EAAKqJ,EAALrJ,EAGAqJ,IAAJ,EACIxJ,EAAKwJ,EAALxJ,EAEAE,EAAKsJ,EAALtJ,EAGRuJ,EAAY,CAAEzJ,GAAF,EAAUC,GAAV,EAAkBC,GAAlB,EAA0BC,GAAIA,OAmL5CuJ,IAAWlC,UAAjB,IAAsCA,IACtC,IAAImC,GAAmB,CAAE5M,EAAF,EAAQC,EAAG,GAC9B4M,GAAJ,EACIC,GAAJ,EACIC,GAAJ,QACA,MAAc,CACVH,GAAmBrK,EACfkI,EADkC,EAElCA,EAFkC,aAAtCmC,IASA,MAAMrM,EAAQ4D,GAAUsG,EAAD,EAAaA,EAApC,GAEAmC,QACAA,QACAC,GAAgBnM,GAAU+J,EAAV/J,GAAhBmM,EACAC,GAAiBjM,GAAW4J,EAAX5J,GAAjBiM,EACAC,GAAoBxM,aAAmBjC,EAAnBiC,WAApBwM,OAGJ,OACI,yBAAKxM,MAAO,CAAEyM,SAAF,WAAwB7N,OAAQ,SACxC,4BACIoB,MAAO,CACHf,MADG,oBAEHL,OAFG,oBAGH8N,QAAS,kBAEb1J,IAAKX,IAET,yBACIW,IAAKT,EACLoK,cAnNWxE,IACnB,IAAKA,EAAD,UAAeA,oBAAnB,SACI,OAEJ,MAAMoD,EAAOpD,SAAb,wBAGM+B,EAAW1I,EAFP2G,UAAYoD,EAAtB,KACUpD,UAAYoD,EAAtB,IAC2CzJ,GAA3C,IACA8K,MACAvC,OA2MQwC,YA/hBS1E,IACjB,OAAIA,SACA,OAEJ,IAAKA,EAAD,UAAeA,oBAAnB,SACI,OAEJ,MAAMoD,EAAOpD,SAAb,wBACM1I,EAAI0I,UAAYoD,EAAtB,KACM7L,EAAIyI,UAAYoD,EAAtB,IAEA,GAAI9L,MAAmBC,EAAvB,GACI,OAGJ,MAAMgM,EAAgB1M,WAAWS,EAlkCzC,IAmkCckM,EAAgB3M,WAAWU,EAlkCzC,IAokCQ,GAAIuF,OAAyBA,MAA7B,GAAmE,qBACvCA,MAAxB,IAD+D,IAC/D,2BAA8D,OAA9D,EAA8D,QAC1D,GACInC,QACArD,GAAKqD,IAAcA,EADnBA,GAEAA,KAFAA,GAGApD,GAAKoD,IAAcA,EAJvB,EAOI,YADA0I,GAAmC,SAAQ1I,eARY,+BAcnE,GAAIpD,EAtlCZ,GAslCoC,CACxB,IAAIO,EA3lChB,GA0lCoC,oBAEN2B,GAAlB,OAFwB,IAExB,2BAAqC,OAArC,EAAqC,QACjC,GAAI5C,SAASiB,EAATjB,GAnlCpB,EA0lCoB,OANA3B,oDACA+N,GAAgB,CACZvE,OADY,EAEZiG,SAAU3M,GAAUiH,EAFR,GAGZ2F,OAAQ3F,EAAM,IAItBnH,GAAME,GAANF,IAZoB,+BAe5B,GAAIR,EAzmCZ,GAymCgC,CACpB,IAAIW,EAtmChB,GAqmCgC,oBAEF0B,GAAlB,OAFoB,IAEpB,2BAAkC,OAAlC,EAAkC,QAC9B,GAAI9C,SAASoB,EAATpB,GAlmCpB,EAymCoB,OANA3B,oDACAgO,GAAa,CACTvE,OADS,EAETkG,UAAW1M,GAAW0G,EAFb,GAGTiG,OAAQjG,EAAM,IAItB5G,GAAME,GAANF,IAZgB,+BAiBxB,GAAIpB,SAASS,EAAImF,GAAb5F,GA7nCZ,GA6nC0DA,SAASU,EAAIkF,GAAb5F,GA7nC1D,EAgoCY,OAFAmM,YACAgB,EAAY,CAAEzJ,GAAImC,EAAN,GAAoBlC,GAAIkC,EAAxB,GAAsCjC,GAAIiC,EAA1C,GAAwDhC,GAAIgC,EAAUhC,KAItF,MAAMmJ,EAAOxK,EAAoB/B,EAAGC,EAAGoC,GAAvC,IACMoL,EAAOC,EAAe,CAAE1N,EAAGoF,EAAL,GAAmBnF,EAAGmF,EAAUlC,IAAnC,eAA+CqJ,GAExE,IACI/B,KAGJ,IAAInG,GAAJ,EAEIrE,EAzoCZ,IA0oCYuM,QACAlI,KACAmH,QAEAA,OAGAvL,EA7oCZ,IA8oCYsM,QACAlI,KACAoH,QAEAA,OAGJF,OACAnH,GAAgBqJ,EAAD,EAASA,EAAT,EAAiBlB,EAAjB,EAAyBA,EAAzB,EAAfnI,GACAuG,EAAY,CAAE3K,GAAF,EAASC,GAAI,KA+bjB+L,YAAaA,GACb2B,aAriBS,KACjB/P,0CAqiBQgQ,cAhEWlF,IACnB,IAAK/F,EAAL,aACI,OAEJ,IAAK+F,EAAD,UAAeA,oBAAnB,SACI,OAGJ,MAAMoD,EAAOpD,SAAb,wBACM1I,EAAI0I,UAAYoD,EAAtB,KACM7L,EAAIyI,UAAYoD,EAAtB,IACMW,EAAO1K,EAAoB/B,EAAGC,EAAGoC,GAAvC,IAEA,GAAIpC,EAriDZ,IAqiDsCD,EAziDtC,GAyiD0D,CAC9CgM,MACA,MAAM6B,EAAE,2BAAoB,GAApB,IAEJ7L,MAAOyK,EAFiB,EAGxBxK,MAAOwK,EAAKxM,IAEhB0C,oBA6CImL,SAhkBMpF,IACd,IAAKA,EAAD,UAAeA,oBAAnB,SACI,OAEJ,MAAMtG,EAAOsG,SAAb,WACMpG,EAAOoG,SAAb,UAEM1G,EAAQzC,WAAW6C,EA3hCjC,IA4hCcH,EAAQ1C,WAAW+C,EA5hCjC,IA6hCYN,IAAUS,EAAVT,GAA0BC,IAAUQ,EAAxC,GACIoC,EAAc,CAAE7E,EAAF,EAAYC,EAAGgC,IAGjC,IAAI8L,EAAe,eAAKC,GACpBA,KAAe5L,EAAf4L,IAAJ,IACID,UAEAC,KAAe1L,EAAf0L,IAAJ,IACID,UAEAA,MAAmBC,EAAnBD,GAAkCC,MAAgBD,EAAtD,GACIE,EAAa,eAAKF,KA4iBd9P,UAAWiQ,EACX3N,MAAO,CACHyM,SADG,WAEHxN,MAFG,OAGHL,OAHG,OAIHpB,IAJG,EAKHoQ,KALG,EAMHC,SANG,SAOHC,aAAc,mBAGlB,yBACI9N,MAAO,CACHyM,SADG,WAEHmB,KAFG,EAGHpQ,IAHG,EAIHyB,MAJG,EAKHL,OAAQ6O,IALL,IAMHjP,gBAAiB,qBAGzB,yBACIwB,MAAO,CACHyM,SADG,WAEHmB,KAFG,EAGHpQ,IAHG,EAIHyB,MAAOwO,IAJJ,IAKH7O,OALG,EAMHJ,gBAAiB,sBAI7B,8BACIwB,MAAO,CAAEyM,SAAF,WAAwBjP,IAAxB,EAAgCoQ,KAAhC,EAAyC3O,MAAzC,EAAmDL,OAAnD,EAA8DmP,QAAS,KAC9E/K,IAAKR,EACLwL,QAAU7F,GAAMA,kBAChB8F,SAAU,EACVC,UA5MW/F,IACnB,GAAIiE,OAAkC,CAAC,aAAc,YAAa,UAAW,aAAa+B,SAAShG,EAAnG,KACI8B,UAIJ,aAAI9B,OAKJ,KAAKA,YAAaA,EAAd,SAAJ,MAAgC5G,oBAAoB4G,EAApB5G,yBAK3B4G,YAAaA,EAAd,SAAJ,MAAgC5G,oBAAoB4G,EAApB5G,sBAIhC,GAAI4G,qBAAJ,WAA6BA,OA0B7B,IAAItD,eAAuBA,OAAvBA,IAA8CA,OAAlD,IAAyEA,KAAzE,CAIA,GACKsD,eAAmBA,WAApB,IACCA,eAAmBA,WADpB,KAECA,eAAmBA,WAFpB,cAGAA,OAHA,MAIAA,OAJA,MAKAA,OANJ,MAOIA,MAEA,OAAI3E,GAAaqB,EAAD,GAAeA,EAA/B,SACIsD,oBAIJkC,GAAiB,CAAE5K,EAAGoF,EAAL,GAAmBnF,EAAGmF,EAAUlC,UACjDiK,YAAsBzE,QAI1B,GAAI,CAAC,aAAc,YAAa,UAAW,aAAagG,SAAShG,EAAjE,KAAyE,CACrE,IAAI+E,EAAO,CAAEzN,EAAGoF,EAAL,GAAmBnF,EAAGmF,EAAUlC,IACvCqJ,EAAO,CAAEvM,EAAGoF,EAAL,GAAmBnF,EAAGmF,EAAUhC,IAqB3C,MAnBIsF,sBAAJ,QAA8BA,MAC1B6D,OACG,cAAI7D,MACP6D,OACG,YAAI7D,MACP6D,OACG,cAAI7D,QACP6D,QAEAA,IAAJ,IACIA,OAEAA,IAAJ,IACIA,OAEC7D,EAAL,WACI+E,EAAO,eAAKlB,SAEhBnI,GAAgBqJ,EAAD,EAASA,EAAT,EAAiBlB,EAAjB,EAAyBA,EAAxCnI,GAGJsE,wBA1EA,CACI,IAAIzF,EAAKmC,EAAT,GACIlC,EAAKkC,EAAT,GACIjC,EAAKiC,EAAT,GACIhC,EAAKgC,EAAT,GACInC,EAAJ,IACIA,EAAKmC,EAALnC,GACAE,EAAKiC,EAALjC,IAEAD,EAAJ,IACIA,EAAKkC,EAALlC,GACAE,EAAKgC,EAALhC,IAEJ,MAAMoG,EAAN,GACA,IAAK,IAAIvJ,EAAT,EAAiBA,GAAjB,EAA0BA,IACtB,IAAK,IAAID,EAAT,EAAiBA,GAAjB,EAA0BA,IACtBwJ,OAAa,CAAExJ,EAAF,EAAQC,EAAR,EAAc4J,MAAO,OAGtClH,EAAJ,UACIA,oBAjCJgM,OAsMIC,QA5GSlG,IACjBiG,EAAgBjG,EAAhBiG,aA8GKhC,IACG,2BACIkC,KAAK,OACLN,QAAU7F,GAAMA,kBAChBoG,WAAS,EACTL,UA3PG/F,IACf,cAAIA,OAaJ,GATA,UAAIA,QACA8B,KACApG,GAAgBgB,EAAD,GAAeA,KAAf,EAAiCA,EAAjC,GAA+CA,KAA9DhB,IAEJ,QAAIsE,QACAA,mBACA8B,KACApG,GAAgBgB,KAAD,EAAmBA,EAAnB,GAAiCA,KAAjC,EAAmDA,EAAlEhB,KAEA2K,GAAsB,CAAC,aAAc,YAAa,UAAW,aAAaL,SAAShG,EAAvF,KAA+F,CAC3FA,mBACA8B,KACA,IAAIvH,EAAKmC,EAAT,GACIlC,EAAKkC,EAAT,GACIjC,EAAKiC,EAAT,GACIhC,EAAKgC,EAAT,GACA,eAAIsD,OACAzF,EAAKmC,KAALnC,EACAE,EAAKiC,KAALjC,GACG,cAAIuF,OACPzF,EAAKmC,KAALnC,EACAE,EAAKiC,KAALjC,GACG,YAAIuF,OACPxF,EAAKkC,KAALlC,EACAE,EAAKgC,KAALhC,GACG,cAAIsF,QACPxF,EAAKkC,KAALlC,EACAE,EAAKgC,KAALhC,GAEJgB,GAAgBnB,EAAIC,EAAIC,EAAxBiB,SAhCAuG,EAAY,CAAE3K,GAAF,EAASC,GAAI,KA0PjB4J,MAAOa,EACPsE,SAAWtG,GAAMqC,EAAarC,SAAD,OAC7BnI,MAAO,CACHyM,SADG,WAEHjP,IAAK6O,GAFF,EAGHuB,KAAMvB,GAHH,EAIHpN,MAJG,GAKHL,OALG,GAMH8N,QANG,OAOHgC,OAPG,OAQH1Q,UARG,GASHI,MATG,QAUHH,SAAUF,EAVP,SAWHM,WAAY,kB,MC/pDpC,MAAMsQ,EAAiB,GACvB,IAAK,IAAI3H,EAAM,EAAGA,EAAM,IAAMA,IAAO,CACjC,MAAM4H,EAAI,GACV,IAAK,IAAIxH,EAAM,EAAGA,EAAM,IAAKA,IACzBwH,EAAEC,KAAF,eAAe7H,EAAf,kBAA4BI,IAEhCuH,EAAeE,KAAKD,GAGxB,MAAME,EAAmB,CACrB,CAAC,QAAS,SAAU,QAAS,SAAU,QAAS,SAChD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAGdC,EAAwB,GAC9B,IAAK,IAAI/H,EAAM,EAAGA,EAAM,IAAMA,IAAO,CACjC,MAAM4H,EAAI,GACV,IAAK,IAAIxH,EAAM,EAAGA,EAAM,IAAKA,IACzBwH,EAAEC,KAAqB,IAAhB7P,KAAKgQ,UAEhBD,EAAsBF,KAAKD,GAGxB,SAASK,IAAkB,MAAD,EACLxM,mBAASkM,GADJ,mBACtBO,EADsB,KAChBC,EADgB,OAEK1M,mBAASpD,MAAM,KAAK+P,KAAK,MAF9B,mBAEtBjP,EAFsB,KAEXkP,EAFW,OAGO5M,mBAAS,IAHhB,mBAGtBnC,EAHsB,KAGVgP,EAHU,KAyD7B,OACI,yBAAK5R,UAAU,aACX,kBAAC,EAAD,CACI6R,mBAvDe,CAAC7M,EAAIC,EAAIC,EAAIC,OAwD5B2M,aAvDS,OAwDTlM,cAvDU,CAAC,IAAK,IAAK,KAwDrBM,UAvDM,CAACnE,EAAGC,KACX,IAuDCiE,SArDK,CAAClE,EAAGC,KAAO,IAAD,EACvB,cAAOwP,QAAP,IAAOA,GAAP,UAAOA,EAAOxP,UAAd,aAAO,EAAYD,IAqDXiE,YAnDQ,CAACjE,EAAGC,KAAO,IAAD,EAC1B,cAAOwP,QAAP,IAAOA,GAAP,UAAOA,EAAOxP,UAAd,aAAO,EAAYD,IAmDXgE,WAjDO,CAAChE,EAAGC,KAAO,IAAD,EACzB,cAAOwP,QAAP,IAAOA,GAAP,UAAOA,EAAOxP,UAAd,aAAO,EAAYD,IAiDXU,UAAWA,EACXG,WAAYA,EACZmO,SAhDMxF,IACd,MAAMwG,EAAU,IAAIP,GADM,oBAELjG,GAFK,IAE1B,2BAA8B,CAAC,MAApByG,EAAmB,QACrBD,EAAQC,EAAOhQ,KAChB+P,EAAQC,EAAOhQ,GAAK,IAExB+P,EAAQC,EAAOhQ,GAAGgQ,EAAOjQ,GAAKiQ,EAAOpG,OANf,8BAQ1B6F,EAAQM,IAyCAE,SAtCO,CAAClQ,EAAGC,KACZ,EAsCCkQ,kBAnCc,CAACC,EAAWjE,KAClC,MAAM3E,EAAK,IAAI9G,GACf,GAAI0P,EAAY5I,EAAG6I,OACf,IAAK,IAAInO,EAAIsF,EAAG6I,OAAQnO,GAAKkO,EAAWlO,IACpCsF,EAAG4H,KAAK,KAGhB5H,EAAG4I,GAAajE,EAChByD,EAAapI,IA4BL8I,mBA1Be,CAAC9C,EAAQnB,KAChC,MAAM5E,EAAK,IAAI5G,GACf,GAAI2M,EAAS/F,EAAG4I,OACZ,IAAK,IAAInO,EAAIuF,EAAG4I,OAAQnO,GAAKsL,EAAQtL,IACjCuF,EAAG2H,KAAK,IAGhB3H,EAAG+F,GAAUnB,EACbwD,EAAcpI,IAmBN/D,cAAe,EACfC,WAAY,KAMrB,SAAS4M,IAAiB,MAAD,EACJvN,mBAASwN,KAAKC,MAAMD,KAAKE,UAAUrB,KAD/B,mBACrBI,EADqB,KACfC,EADe,OAEM1M,mBAAS,IAFf,mBAErBtC,EAFqB,KAEVkP,EAFU,OAGQ5M,mBAAS,IAHjB,mBAGrBnC,EAHqB,KAGTgP,EAHS,KAyD5B,OACI,yBAAK5R,UAAU,aACX,kBAAC,EAAD,CACI6R,mBAvDe,CAAC7M,EAAIC,EAAIC,EAAIC,OAwD5B2M,aAvDS,OAwDTlM,cAvDU,CAAC,IAAK,IAAK,KAwDrBM,UAvDM,CAACnE,EAAGC,KACX,IAuDCiE,SArDK,CAAClE,EAAGC,KAAO,IAAD,EACvB,cAAOwP,QAAP,IAAOA,GAAP,UAAOA,EAAOxP,UAAd,aAAO,EAAYD,IAqDXiE,YAnDQ,CAACjE,EAAGC,KAAO,IAAD,EAC1B,cAAOwP,QAAP,IAAOA,GAAP,UAAOA,EAAOxP,UAAd,aAAO,EAAYD,IAmDXgE,WAjDO,CAAChE,EAAGC,KAAO,IAAD,EACzB,cAAOwP,QAAP,IAAOA,GAAP,UAAOA,EAAOxP,UAAd,aAAO,EAAYD,IAiDXU,UAAWA,EACXG,WAAYA,EACZmO,SAhDMxF,IACd,MAAMwG,EAAU,IAAIP,GADM,oBAELjG,GAFK,IAE1B,2BAA8B,CAAC,MAApByG,EAAmB,QACrBD,EAAQC,EAAOhQ,KAChB+P,EAAQC,EAAOhQ,GAAK,IAExB+P,EAAQC,EAAOhQ,GAAGgQ,EAAOjQ,GAAKiQ,EAAOpG,OANf,8BAQ1B6F,EAAQM,IAyCAE,SAtCO,CAAClQ,EAAGC,KACZ,EAsCCkQ,kBAnCc,CAACC,EAAWjE,KAClC,MAAM3E,EAAK,IAAI9G,GACf,GAAI0P,EAAY5I,EAAG6I,OACf,IAAK,IAAInO,EAAIsF,EAAG6I,OAAQnO,GAAKkO,EAAWlO,IACpCsF,EAAG4H,KAAK,KAGhB5H,EAAG4I,GAAajE,EAChByD,EAAapI,IA4BL8I,mBA1Be,CAAC9C,EAAQnB,KAChC,MAAM5E,EAAK,IAAI5G,GACf,GAAI2M,EAAS/F,EAAG4I,OACZ,IAAK,IAAInO,EAAIuF,EAAG4I,OAAQnO,GAAKsL,EAAQtL,IACjCuF,EAAG2H,KAAK,IAGhB3H,EAAG+F,GAAUnB,EACbwD,EAAcpI,IAmBN/D,cAAe,EACfC,WAAY,KAMrB,SAASgN,IAAiB,MAAD,EACJ3N,mBAASwN,KAAKC,MAAMD,KAAKE,UAAUrB,KAD/B,mBACrBI,EADqB,KACfC,EADe,OAEM1M,mBAAS,IAFf,mBAErBtC,EAFqB,KAEVkP,EAFU,OAGQ5M,mBAAS,IAHjB,mBAGrBnC,EAHqB,KAGTgP,EAHS,KAQtBe,EAAS,CAAC,OAAQ,OAAQ,OAAQ,QAClCC,EAAY,CAAC,OAAQ,QAAS,UAC9BhS,EAAS,CAAC,SAAU,OAAQ,WAC5BJ,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,IA2DjC,OACI,yBAAKR,UAAU,aACX,kBAAC,EAAD,CACI6R,mBApEe,CAAC7M,EAAIC,EAAIC,EAAIC,OAqE5B2M,aApES,OAqETlM,cApEU,GAqEVM,UAhEM,CAACnE,EAAGC,IACR,IAAND,GAAiB,IAANC,EACJ,CACHnB,UAAW,aAGZ,CACHH,MAAOiS,EAAO3Q,EAAI,GAClB1B,UAAWsS,EAAU7Q,EAAI,GACzBvB,YAAaA,EAAYuB,EAAI,GAC7BnB,OAAQA,EAAOoB,EAAI,IAuDfiE,SApDK,CAAClE,EAAGC,KAAO,IAAD,EACvB,cAAOwP,QAAP,IAAOA,GAAP,UAAOA,EAAOxP,UAAd,aAAO,EAAYD,IAoDXiE,YAlDQ,CAACjE,EAAGC,KAAO,IAAD,EAC1B,cAAOwP,QAAP,IAAOA,GAAP,UAAOA,EAAOxP,UAAd,aAAO,EAAYD,IAkDXgE,WAhDO,CAAChE,EAAGC,KAAO,IAAD,EACzB,cAAOwP,QAAP,IAAOA,GAAP,UAAOA,EAAOxP,UAAd,aAAO,EAAYD,IAgDXU,UAAWA,EACXG,WAAYA,EACZmO,SAhDMxF,IACd,MAAMwG,EAAU,IAAIP,GADM,oBAELjG,GAFK,IAE1B,2BAA8B,CAAC,MAApByG,EAAmB,QACrBD,EAAQC,EAAOhQ,KAChB+P,EAAQC,EAAOhQ,GAAK,IAExB+P,EAAQC,EAAOhQ,GAAGgQ,EAAOjQ,GAAKiQ,EAAOpG,OANf,8BAQ1B6F,EAAQM,IAyCAE,SAtCO,CAAClQ,EAAGC,KACZ,EAsCCkQ,kBAnCc,CAACC,EAAWjE,KAClC,MAAM3E,EAAK,IAAI9G,GACf,GAAI0P,EAAY5I,EAAG6I,OACf,IAAK,IAAInO,EAAIsF,EAAG6I,OAAQnO,GAAKkO,EAAWlO,IACpCsF,EAAG4H,KAAK,KAGhB5H,EAAG4I,GAAajE,EAChByD,EAAapI,IA4BL8I,mBA1Be,CAAC9C,EAAQnB,KAChC,MAAM5E,EAAK,IAAI5G,GACf,GAAI2M,EAAS/F,EAAG4I,OACZ,IAAK,IAAInO,EAAIuF,EAAG4I,OAAQnO,GAAKsL,EAAQtL,IACjCuF,EAAG2H,KAAK,IAGhB3H,EAAG+F,GAAUnB,EACbwD,EAAcpI,IAmBN/D,cAAe,EACfC,WAAY,KAMrB,SAASmN,IAAsB,MAAD,EACT9N,mBAASsM,GADA,mBAC1BG,EAD0B,KACpBC,EADoB,OAEC1M,mBAAS,IAFV,mBAE1BtC,EAF0B,KAEfkP,EAFe,OAGG5M,mBAAS,IAHZ,mBAG1BnC,EAH0B,KAGdgP,EAHc,KAsDjC,OACI,yBAAK5R,UAAU,aACX,kBAAC,EAAD,CACIkG,UApDM,CAACnE,EAAGC,KACX,IAoDCiE,SAlDK,CAAClE,EAAGC,KAAO,IAAD,EACvB,cAAOwP,QAAP,IAAOA,GAAP,UAAOA,EAAOxP,UAAd,aAAO,EAAYD,IAkDXiE,YAhDQ,CAACjE,EAAGC,KAAO,IAAD,MAC1B,cAAOwP,QAAP,IAAOA,GAAP,UAAOA,EAAOxP,UAAd,iBAAO,EAAYD,UAAnB,iBAAO,EAAgB+Q,eAAvB,aAAO,SAA0B,IAgDzB/M,WA9CO,CAAChE,EAAGC,KAAO,IAAD,EACzB,cAAOwP,QAAP,IAAOA,GAAP,UAAOA,EAAOxP,UAAd,aAAO,EAAYD,IA8CXU,UAAWA,EACXG,WAAYA,EACZmO,SA7CMxF,IACd,MAAMwG,EAAU,IAAIP,GADM,oBAELjG,GAFK,IAE1B,2BAA8B,CAAC,MAApByG,EAAmB,QACrBD,EAAQC,EAAOhQ,KAChB+P,EAAQC,EAAOhQ,GAAK,IAExB+P,EAAQC,EAAOhQ,GAAGgQ,EAAOjQ,GAAKgR,OAAOf,EAAOpG,QANtB,8BAQ1B6F,EAAQM,IAsCAE,SAnCO,CAAClQ,EAAGC,KACZ,EAmCCkQ,kBAhCc,CAACC,EAAWjE,KAClC,MAAM3E,EAAK,IAAI9G,GACf,GAAI0P,EAAY5I,EAAG6I,OACf,IAAK,IAAInO,EAAIsF,EAAG6I,OAAQnO,GAAKkO,EAAWlO,IACpCsF,EAAG4H,KAAK,KAGhB5H,EAAG4I,GAAajE,EAChByD,EAAapI,IAyBL8I,mBAvBe,CAAC9C,EAAQnB,KAChC,MAAM5E,EAAK,IAAI5G,GACf,GAAI2M,EAAS/F,EAAG4I,OACZ,IAAK,IAAInO,EAAIuF,EAAG4I,OAAQnO,GAAKsL,EAAQtL,IACjCuF,EAAG2H,KAAK,IAGhB3H,EAAG+F,GAAUnB,EACbwD,EAAcpI,IAgBN/D,cAAe,EACfC,WAAY,KAMrB,SAASsN,IAAuB,MAAD,EACQjO,mBAAS,WADjB,mBAC3BkO,EAD2B,KACZC,EADY,OAEVnO,mBAAS,IAFC,mBAE3ByM,EAF2B,KAErBC,EAFqB,OAGA1M,mBAAS,IAHT,mBAG3BtC,EAH2B,KAGhBkP,EAHgB,OAIE5M,mBAAS,IAJX,mBAI3BnC,EAJ2B,KAIfgP,EAJe,KA6GlC,OACI,oCACuB,YAAlBqB,EACG,uBAAGE,KAAK,IAAI/S,QA1GLqK,IACfA,EAAE2I,iBACFF,EAAiB,WACjBG,MAAM,cACDC,KAAMC,GACIA,EAASC,QAEnBF,KAAMG,IACHhC,EAAQgC,GACRP,EAAiB,YAiGjB,wCAGkB,YAAlBD,EACA,aACA,KACJ,yBAAKjT,UAAU,aACX,kBAAC,EAAD,CACIkG,UArGE,CAACnE,EAAGC,IACR,IAANA,EACO,CACHpB,OAAQ,OACRL,SAAU,IAGR,IAANwB,EACO,CACHzB,UAAW,SAEF,IAANyB,EACA,CACHnB,OAAQ,OACRF,MAAO,WAEE,IAANqB,EACA,CACHrB,MAAO,WAGR,GAiFKuF,SA/EC,CAAClE,EAAGC,KAAO,IAAD,EACvB,cAAOwP,QAAP,IAAOA,GAAP,UAAOA,EAAOxP,UAAd,aAAO,EAAYD,IA+EPiE,YA7EI,CAACjE,EAAGC,KAAO,IAAD,EAC1B,OAAU,IAAND,GAAWC,EAAI,EACXwP,GAAQA,EAAKxP,IAAMwP,EAAKxP,GAAGD,GACpBgR,OAAOvB,EAAKxP,GAAGD,IAAI+Q,QAAQ,GAE3B,GAGf,OAAOtB,QAAP,IAAOA,GAAP,UAAOA,EAAOxP,UAAd,aAAO,EAAYD,IAsEPgE,WApEG,CAAChE,EAAGC,KAAO,IAAD,EACzB,cAAOwP,QAAP,IAAOA,GAAP,UAAOA,EAAOxP,UAAd,aAAO,EAAYD,IAoEPU,UAAWA,EACXG,WAAYA,EACZmO,SAnEExF,IACd,MAAMwG,EAAU,IAAIP,GADM,oBAELjG,GAFK,IAE1B,2BAA8B,CAAC,MAApByG,EAAmB,QACrBD,EAAQC,EAAOhQ,KAChB+P,EAAQC,EAAOhQ,GAAK,IAExB+P,EAAQC,EAAOhQ,GAAGgQ,EAAOjQ,GAAKiQ,EAAOpG,OANf,8BAQ1B6F,EAAQM,IA4DIE,SAzDG,CAAClQ,EAAGC,KACZ,EAyDKkQ,kBAtDU,CAACC,EAAWjE,KAClC,MAAM3E,EAAK,IAAI9G,GACf,GAAI0P,EAAY5I,EAAG6I,OACf,IAAK,IAAInO,EAAIsF,EAAG6I,OAAQnO,GAAKkO,EAAWlO,IACpCsF,EAAG4H,KAAK,KAGhB5H,EAAG4I,GAAajE,EAChByD,EAAapI,IA+CD8I,mBA7CW,CAAC9C,EAAQnB,KAChC,MAAM5E,EAAK,IAAI5G,GACf,GAAI2M,EAAS/F,EAAG4I,OACZ,IAAK,IAAInO,EAAIuF,EAAG4I,OAAQnO,GAAKsL,EAAQtL,IACjCuF,EAAG2H,KAAK,IAGhB3H,EAAG+F,GAAUnB,EACbwD,EAAcpI,IAsCF3D,kBAnCKrC,IACjB,MAAM0N,GAAc,KAAR1N,EAAgB,KAAKkQ,SAAS,IAAIC,SAAS,EAAG,KACpDC,GAAc,KAARpQ,EAAgB,KAAKkQ,SAAS,IAAIC,SAAS,EAAG,KACpDE,GAAc,KAARrQ,EAAgB,KAAKkQ,SAAS,IAAIC,SAAS,EAAG,KAE1D,MAAO,CACH7S,gBAFO,WAAOoQ,GAAP,OAAW0C,GAAX,OAAeC,EAAf,QAgCCjO,cA1BOpC,GACZ,GAAKA,EA0BAiC,cAAe,EACfC,WAAY,M,qBC5bjBoO,MA7Cf,WACI,MAAMC,EAAcnP,iBAAO,MADb,EAEwBG,mBAAS,IAFjC,mBAEPiP,EAFO,KAEMC,EAFN,KAcd,OACI,yBAAKjU,UAAU,oBAAoBkU,GAAG,QAClC,yBAAKlU,UAAU,2BACX,yBAAKA,UAAU,gBACX,6BACI,kFACA,uBAAGA,UAAU,eAAb,iDAEI,6BAFJ,yBAMJ,yBAAKA,UAAU,WACX,yBAAKA,UAAU,cAAcI,QAvBxBqK,IACrBsJ,EAAYI,QAAQC,SACpB7U,SAAS8U,YAAY,QACrB5J,EAAE6J,OAAOC,QACTN,EAAe,WACfpN,WAAW,KACPoN,EAAe,KAChB,OAiBiB,2BAAOhC,UAAQ,EAAC3M,IAAKyO,EAAanI,MAAM,qCACvB,KAAhBoI,GAAsB,yBAAKhU,UAAU,gBAAgBgU,IAE1D,uBAAGb,KAAK,8CAA8CnT,UAAU,UAAUsU,OAAO,UAC7E,yBAAKrU,IAAKuU,IAASrU,IAAI,QAD3B,oBAMR,yBAAKH,UAAU,OACX,kBAACuR,EAAD,UChCLkD,MATf,UAAwB,MAAEC,EAAF,GAASR,IAC7B,OACI,yBAAKlU,UAAU,kBAAkBkU,GAAIA,GAAU,IAC3C,2BAAIQ,GAAgB,YACpB,yBAAK1U,UAAU,gBCIZ2U,MARf,UAAc,SAAEC,IACZ,OACI,yBAAK5U,UAAU,aACX,yBAAKA,UAAU,oBAAoB4U,K,kBCqFhCC,MAtFf,WACI,OACI,kBAAC,IAAD,CAAmBC,SAAS,aAAaxS,MAAOyS,KAAhD,u1ECIOC,MARf,WACI,OACI,yBAAKhV,UAAU,UACX,uBAAGA,UAAU,QAAb,WAA4B,uBAAGmT,KAAK,0BAAR,cC2EzB8B,MArEH,IAEJ,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAgBP,MAAM,QAAQR,GAAG,UACjC,kBAAC,EAAD,KACI,yBAAKlU,UAAU,iBAAiBsC,MAAO,CAAE4S,UAAW,SAChD,kBAAC,EAAD,QAIR,kBAAC,EAAD,CAAgBR,MAAM,+BAA+BR,GAAG,aACxD,kBAAC,EAAD,KACI,yBAAKlU,UAAU,OACX,kBAACsS,EAAD,OAEJ,yBAAKtS,UAAU,OACX,iDACA,kOAOR,kBAAC,EAAD,KACI,yBAAKA,UAAU,OACX,kBAAC0S,EAAD,OAEJ,yBAAK1S,UAAU,OACX,uCACA,6JAKR,kBAAC,EAAD,KACI,yBAAKA,UAAU,OACX,kBAAC6S,EAAD,OAEJ,yBAAK7S,UAAU,OACX,0CACA,gLAMR,kBAAC,EAAD,CAAgB0U,MAAM,sBAAsBR,GAAG,wBAC/C,kBAAC,EAAD,KACI,yBAAKlU,UAAU,kBACX,kBAACgT,EAAD,QAIR,kBAAC,EAAD,CAAgB0B,MAAM,gBAAgBR,GAAG,kBACzC,kBAAC,EAAD,KACI,yBAAKlU,UAAU,kBACX,6CAIR,kBAAC,EAAD,OCrEZmV,IAASC,OAAO,kBAAC,EAAD,MAAS7V,SAASC,eAAe,U","file":"static/js/main.03179e24.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.aef13910.svg\";","module.exports = __webpack_public_path__ + \"static/media/git.f818b886.svg\";","import React from 'react';\nimport Logo from '../assets/logo.svg';\n\nfunction Menu() {\n    const scrollTo = (elId) => {\n        var element = document.getElementById(elId);\n        var headerOffset = elId === 'home' ? 0 : 86;\n        var elementPosition = window.pageYOffset + element.getBoundingClientRect().top;\n        var offsetPosition = elementPosition - headerOffset;\n\n        window.scrollTo({\n             top: offsetPosition,\n             behavior: \"smooth\"\n        });\n    }\n\n    return (\n        <div className=\"container blue-bg menu\">\n            <div className=\"content flex-row\">\n                <div className=\"logo-box\">\n                    <img src={Logo} alt=\"Logo\" />\n                    <h2 className=\"page-title\">sheet - happens</h2>\n                </div>\n                <div className=\"nav\">\n                    <div className=\"nav-item\" onClick={() => scrollTo('home')} >home</div>\n                    <div className=\"nav-item\" onClick={() => scrollTo('usage')} >usage</div>\n                    <div className=\"nav-item\" onClick={() => scrollTo('features')} >features</div>\n                    <div className=\"nav-item\" onClick={() => scrollTo('documentation')} >documentation</div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Menu;\n","import styles from './styles.module.css';\nimport React, { useRef, useEffect, useState, useMemo, MouseEvent, KeyboardEvent, UIEvent } from 'react';\nimport useResizeObserver from 'use-resize-observer';\n\nconst selBorderColor = '#1b73e7';\nconst selBackColor = '#e9f0fd';\nconst knobSize = 6;\nconst gridColor = '#e2e3e3';\nconst knobAreaBorderColor = '#707070';\nconst rowHeaderWidth = 50;\nconst rowHeaderBackgroundColor = '#f8f9fa';\nconst rowHeaderTextColor = '#666666';\nconst rowHeaderSelectedBackgroundColor = '#e8eaed';\nconst columnHeaderHeight = 22;\nconst columnHeaderBackgroundColor = rowHeaderBackgroundColor;\nconst columnHeaderSelectedBackgroundColor = rowHeaderSelectedBackgroundColor;\nconst xBinSize = 10;\nconst yBinSize = 10;\nconst scrollSpeed = 30;\nconst resizeColumnRowMouseThreshold = 4;\nconst minimumColumnWidth = 50;\nconst minimumRowHeight = 22;\n\nconst defaultCellStyle: Required<Style> = {\n    textAlign: 'left',\n    fontSize: 13,\n    marginRight: 5,\n    marginLeft: 5,\n    color: '#000',\n    fontFamily: 'sans-serif',\n    weight: '',\n    fillColor: '',\n    backgroundColor: '',\n};\n\nconst defaultColumnHeaderStyle: Required<Style> = {\n    textAlign: 'center',\n    fontSize: 13,\n    marginRight: 5,\n    marginLeft: 5,\n    color: '#000',\n    fontFamily: 'sans-serif',\n    weight: '',\n    fillColor: '',\n    backgroundColor: '',\n};\n\ntype PropTypes = string | number | boolean | Style | CellContentType;\ntype RowOrColumnProperty<T extends PropTypes> = T | Array<T> | ((index: number) => T);\ntype CellProperty<T extends PropTypes> = T | Array<Array<T>> | ((x: number, y: number) => T);\ntype CellContentType = null | number | string | CellContent;\ntype RowOrColumnPropertyFunction<T extends PropTypes> = (rowOrColIndex: number) => T;\ntype CellPropertyFunction<T extends PropTypes> = (x: number, y: number) => T;\n\ninterface CellCoordinate {\n    x: number;\n    y: number;\n}\n\ninterface Selection {\n    x1: number;\n    y1: number;\n    x2: number;\n    y2: number;\n}\n\nexport interface Change {\n    x: number;\n    y: number;\n    value: string | number | null;\n}\n\nexport interface CellContentItem {\n    content: HTMLImageElement | string;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    onClick?: () => void;\n}\n\nexport interface CellContent {\n    items: Array<CellContentItem>;\n}\n\nexport interface SheetMouseEvent extends MouseEvent {\n    cellX: number;\n    cellY: number;\n}\n\nexport interface SheetProps {\n    freezeColumns?: number;\n    freezeRows?: number;\n    cellWidth?: RowOrColumnProperty<number>;\n    cellHeight?: RowOrColumnProperty<number>;\n    columnHeaders?: RowOrColumnProperty<CellContentType>;\n    columnHeaderStyle?: RowOrColumnProperty<Style>;\n    cellStyle?: CellProperty<Style>;\n    readOnly?: CellProperty<boolean>;\n    sourceData?: CellProperty<string | number>;\n    displayData?: CellProperty<CellContentType>;\n    editData?: CellProperty<string>;\n    onSelectionChanged?: (x1: number, y1: number, x2: number, y2: number) => void;\n    onRightClick?: (e: SheetMouseEvent) => void;\n    onChange?: (changes: Array<Change>) => void;\n    onCellWidthChange?: (index: number, value: number) => void;\n    onCellHeightChange?: (index: number, value: number) => void;\n}\n\nexport interface Style {\n    color?: string;\n    fontSize?: number;\n    fontFamily?: string;\n    textAlign?: 'right' | 'left' | 'center';\n    marginRight?: number;\n    marginLeft?: number;\n    weight?: string;\n    fillColor?: string;\n    backgroundColor?: string;\n}\n\ninterface RowOrColumnSize {\n    index: number[];\n    start: number[];\n    end: number[];\n}\n\nfunction resizeCanvas(canvas: HTMLCanvasElement) {\n    const { width, height } = canvas.getBoundingClientRect();\n    let { devicePixelRatio: ratio = 1 } = window;\n    if (ratio < 1) {\n        ratio = 1;\n    }\n    const newCanvasWidth = Math.round(width * ratio);\n    const newCanvasHeight = Math.round(height * ratio);\n\n    if (canvas.width !== newCanvasWidth || canvas.height !== newCanvasHeight) {\n        const context = canvas.getContext('2d');\n        if (context) {\n            canvas.width = newCanvasWidth;\n            canvas.height = newCanvasHeight;\n            context.scale(ratio, ratio);\n        }\n        return true;\n    }\n\n    return false;\n}\n\n// todo first figure out the function\nfunction createRowOrColumnPropFunction<T extends PropTypes>(\n    rowColProp: RowOrColumnProperty<T> | undefined,\n    defaultValue: T\n): RowOrColumnPropertyFunction<T> {\n    if (Array.isArray(rowColProp)) {\n        return (rowOrColIndex: number) => {\n            if (rowOrColIndex >= 0 && rowOrColIndex < rowColProp.length) {\n                return rowColProp[rowOrColIndex];\n            } else {\n                return defaultValue;\n            }\n        };\n    } else if (typeof rowColProp === 'function') {\n        return rowColProp;\n    } else if (rowColProp !== null && rowColProp !== undefined) {\n        return () => rowColProp;\n    } else {\n        return () => defaultValue;\n    }\n}\n\nfunction createCellPropFunction<T extends PropTypes>(\n    cellProp: CellProperty<T> | undefined,\n    defaultValue: T\n): CellPropertyFunction<T> {\n    if (Array.isArray(cellProp)) {\n        return (x: number, y: number) => {\n            if (y >= 0 && y < cellProp.length) {\n                if (x >= 0 && x < cellProp[y].length) {\n                    return cellProp[y][x];\n                } else {\n                    return defaultValue;\n                }\n            } else {\n                return defaultValue;\n            }\n        };\n    } else if (typeof cellProp === 'function') {\n        return cellProp;\n    } else if (cellProp !== null && cellProp !== undefined) {\n        return () => cellProp;\n    } else {\n        return () => defaultValue;\n    }\n}\n\nfunction drawCell(\n    context: CanvasRenderingContext2D,\n    cellContent: CellContentType,\n    style: Style,\n    defaultCellStyle: Required<Style>,\n    xCoord: number,\n    yCoord: number,\n    cellWidth: number,\n    cellHeight: number\n) {\n    if (cellContent === null) {\n        return;\n    }\n    const finalStyle = createStyleObject(style, defaultCellStyle);\n    context.fillStyle = finalStyle.color;\n    context.font = finalStyle.weight + ' ' + finalStyle.fontSize + 'px ' + finalStyle.fontFamily;\n    context.textAlign = finalStyle.textAlign;\n\n    const adjustment =\n        finalStyle.textAlign === 'right'\n            ? cellWidth - finalStyle.marginRight\n            : finalStyle.textAlign === 'center'\n            ? cellWidth * 0.5\n            : finalStyle.marginLeft;\n    const xx = xCoord + adjustment;\n    const yy = yCoord + cellHeight * 0.5;\n\n    context.save();\n    context.beginPath();\n    context.rect(xCoord, yCoord, cellWidth, cellHeight);\n    context.clip();\n\n    if (finalStyle.backgroundColor !== '') {\n        context.fillStyle = finalStyle.backgroundColor;\n        context.fillRect(xCoord, yCoord, cellWidth, cellHeight);\n        context.fillStyle = finalStyle.color;\n    }\n\n    if (typeof cellContent === 'string' || typeof cellContent === 'number') {\n        context.fillText('' + cellContent, xx, yy);\n    } else if (typeof cellContent === 'object') {\n        for (const obj of cellContent.items) {\n            if (obj.content instanceof HTMLImageElement) {\n                context.drawImage(obj.content, xCoord + obj.x, yy + obj.y, obj.width, obj.height);\n            } else if (typeof obj.content === 'string') {\n                context.fillText(obj.content, xCoord + obj.x, yy + obj.y);\n            }\n        }\n    }\n    context.restore();\n}\n\nfunction calculateRowsOrColsSizes(\n    freezeCount: number,\n    size: (index: number) => number,\n    startingSize: number,\n    startingIndex: number,\n    visibleArea: number\n): RowOrColumnSize {\n    const visible = [];\n    const start = [];\n    const end = [];\n    let prev = 0;\n\n    start.push(startingSize);\n    visible.push(freezeCount > 0 ? 0 : startingIndex);\n    let firstSize = freezeCount > 0 ? size(0) : size(startingIndex);\n    prev = startingSize + firstSize;\n    end.push(prev);\n\n    let ind = freezeCount > 0 ? 1 : startingIndex + 1;\n\n    if (freezeCount > 0) {\n        for (; ind < freezeCount; ind++) {\n            visible.push(ind);\n            start.push(prev);\n            prev = prev + size(ind);\n            end.push(prev);\n        }\n        ind = Math.max(startingIndex, freezeCount);\n    }\n\n    while (true) {\n        visible.push(ind);\n        start.push(prev);\n        prev = prev + size(ind);\n        end.push(prev);\n        if (end[end.length - 1] >= visibleArea) {\n            break;\n        }\n        ind++;\n    }\n    return {\n        index: visible,\n        start,\n        end,\n    };\n}\n\nfunction createStyleObject(optionalStyle: Style, defaultStyle: Required<Style>): Required<Style> {\n    return {\n        ...defaultStyle,\n        ...optionalStyle,\n    };\n}\n\nfunction excelHeaderString(num: number) {\n    let s = '';\n    let t = 0;\n    while (num > 0) {\n        t = (num - 1) % 26;\n        s = String.fromCharCode(65 + t) + s;\n        num = ((num - t) / 26) | 0;\n    }\n    return s || '';\n}\n\nfunction absCoordianteToCell(\n    absX: number,\n    absY: number,\n    rowSizes: RowOrColumnSize,\n    columnSizes: RowOrColumnSize\n): CellCoordinate {\n    let cellX = 0;\n    let cellY = 0;\n\n    for (let i = 0; i < columnSizes.index.length; i++) {\n        if (absX >= columnSizes.start[i] && absX <= columnSizes.end[i]) {\n            cellX = columnSizes.index[i];\n            break;\n        }\n    }\n    for (let i = 0; i < rowSizes.index.length; i++) {\n        if (absY >= rowSizes.start[i] && absY <= rowSizes.end[i]) {\n            cellY = rowSizes.index[i];\n            break;\n        }\n    }\n\n    return { x: cellX, y: cellY };\n}\n\nfunction cellToAbsCoordinate(\n    cellX: number,\n    cellY: number,\n    rowSizes: RowOrColumnSize,\n    columnSizes: RowOrColumnSize,\n    dataOffset: CellCoordinate,\n    cellWidth: RowOrColumnPropertyFunction<number>,\n    cellHeight: RowOrColumnPropertyFunction<number>\n): CellCoordinate {\n    let absX = rowHeaderWidth;\n    const indX = columnSizes.index.findIndex((i) => i === cellX);\n    if (indX !== -1) {\n        absX = columnSizes.start[indX];\n    } else {\n        for (let i = 0; i < dataOffset.x; i++) {\n            absX -= cellWidth(i);\n        }\n        for (let i = 0; i < cellX; i++) {\n            absX += cellWidth(i);\n        }\n    }\n\n    let absY = columnHeaderHeight;\n    const indY = rowSizes.index.findIndex((i) => i === cellY);\n    if (indY !== -1) {\n        absY = rowSizes.start[indY];\n    } else {\n        for (let i = 0; i < dataOffset.y; i++) {\n            absY -= cellHeight(i);\n        }\n        for (let i = 0; i < cellY; i++) {\n            absY += cellHeight(i);\n        }\n    }\n    return { x: absX, y: absY };\n}\n\nfunction renderOnCanvas(\n    context: CanvasRenderingContext2D,\n    rowSizes: RowOrColumnSize,\n    columnSizes: RowOrColumnSize,\n    cellStyle: CellPropertyFunction<Style>,\n    cellWidth: RowOrColumnPropertyFunction<number>,\n    cellHeight: RowOrColumnPropertyFunction<number>,\n    selection: Selection,\n    knobDragInProgress: boolean,\n    columnHeaders: RowOrColumnPropertyFunction<CellContentType>,\n    columnHeaderStyle: RowOrColumnPropertyFunction<Style>,\n    knobArea: Selection,\n    displayData: CellPropertyFunction<CellContentType>,\n    dataOffset: CellCoordinate\n) {\n    resizeCanvas(context.canvas);\n    context.clearRect(0, 0, context.canvas.width, context.canvas.height);\n    context.fillStyle = 'white';\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n\n    // apply cell fill color\n    let yCoord1 = columnHeaderHeight;\n    for (const y of rowSizes.index) {\n        let xCoord1 = rowHeaderWidth;\n        for (const x of columnSizes.index) {\n            const style = cellStyle(x, y);\n            if (style.fillColor) {\n                context.fillStyle = style.fillColor;\n                context.fillRect(xCoord1, yCoord1, cellWidth(x), cellHeight(y));\n            }\n            xCoord1 += cellWidth(x);\n        }\n        yCoord1 += cellHeight(y);\n    }\n\n    let hideKnob = false;\n\n    let selx1 = selection.x1;\n    let selx2 = selection.x2;\n\n    if (selection.x1 > selection.x2) {\n        selx1 = selection.x2;\n        selx2 = selection.x1;\n    }\n\n    let sely1 = selection.y1;\n    let sely2 = selection.y2;\n\n    if (selection.y1 > selection.y2) {\n        sely1 = selection.y2;\n        sely2 = selection.y1;\n    }\n\n    const selectionActive = selx1 !== -1 && selx2 !== -1 && sely1 !== -1 && sely2 !== -1;\n\n    const p1 = cellToAbsCoordinate(selx1, sely1, rowSizes, columnSizes, dataOffset, cellWidth, cellHeight);\n    const p2 = cellToAbsCoordinate(selx2, sely2, rowSizes, columnSizes, dataOffset, cellWidth, cellHeight);\n    p2.x += cellWidth(selx2);\n    p2.y += cellHeight(sely2);\n\n    if (p1.x >= p2.x) {\n        // recalculate if the selection span covers both frozen and unfrozen columns\n        p2.x = p1.x;\n        let currentCol = selx1;\n        while (columnSizes.index.includes(currentCol)) {\n            p2.x += cellWidth(currentCol);\n            currentCol++;\n        }\n        hideKnob = true;\n    }\n\n    if (p1.y >= p2.y) {\n        // recalculate if the selection span covers both frozen and unfrozen rows\n        p2.y = p1.y;\n        let currentRow = sely1;\n        while (rowSizes.index.includes(currentRow)) {\n            p2.y += cellHeight(currentRow);\n            currentRow++;\n        }\n        hideKnob = true;\n    }\n\n    // selection fill\n    if (selectionActive) {\n        context.fillStyle = selBackColor;\n        context.fillRect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y);\n    }\n\n    // row header background\n    context.fillStyle = rowHeaderBackgroundColor;\n    context.fillRect(0, 0, rowHeaderWidth, context.canvas.height);\n\n    // row header selection\n    if (selectionActive) {\n        context.fillStyle = rowHeaderSelectedBackgroundColor;\n        context.fillRect(0, p1.y, rowHeaderWidth, p2.y - p1.y);\n    }\n\n    // column header background\n    context.fillStyle = columnHeaderBackgroundColor;\n    context.fillRect(0, 0, context.canvas.width, columnHeaderHeight);\n\n    // column header selection\n    if (selectionActive) {\n        context.fillStyle = columnHeaderSelectedBackgroundColor;\n        context.fillRect(p1.x, 0, p2.x - p1.x, columnHeaderHeight);\n    }\n\n    // grid\n    context.strokeStyle = gridColor;\n    context.lineWidth = 1;\n    let startX = rowHeaderWidth;\n\n    for (const col of columnSizes.index) {\n        context.beginPath();\n        context.moveTo(startX, 0);\n        context.lineTo(startX, context.canvas.height);\n        context.stroke();\n        startX += cellWidth(col);\n    }\n\n    let startY = columnHeaderHeight;\n    for (const row of rowSizes.index) {\n        context.beginPath();\n        context.moveTo(0, startY);\n        context.lineTo(context.canvas.width, startY);\n        context.stroke();\n        startY += cellHeight(row);\n    }\n\n    // row header text\n    startY = columnHeaderHeight;\n    context.textBaseline = 'middle';\n    context.textAlign = 'center';\n    context.font = defaultCellStyle.fontSize + 'px ' + defaultCellStyle.fontFamily;\n    context.fillStyle = rowHeaderTextColor;\n    for (const row of rowSizes.index) {\n        const xx = rowHeaderWidth * 0.5;\n        const yy = startY + cellHeight(row) * 0.5;\n        const cellContent = row + 1;\n        context.fillText('' + cellContent, xx, yy);\n        startY += cellHeight(row);\n    }\n\n    // column header text\n    startX = rowHeaderWidth;\n    context.textBaseline = 'middle';\n    context.textAlign = 'center';\n    for (const col of columnSizes.index) {\n        const cw = cellWidth(col);\n        const ch = columnHeaders(col);\n        const chcontent = ch !== null ? ch : excelHeaderString(col + 1);\n        const chStyle = columnHeaderStyle(col);\n        drawCell(context, chcontent, chStyle, defaultColumnHeaderStyle, startX, 0, cw, columnHeaderHeight);\n        startX += cw;\n    }\n\n    // selection outline\n    if (selectionActive) {\n        context.strokeStyle = selBorderColor;\n        context.lineWidth = 1;\n        context.beginPath();\n        context.rect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y);\n        context.stroke();\n    }\n\n    // knob drag outline\n    if (knobDragInProgress) {\n        let kx1 = knobArea.x1;\n        let kx2 = knobArea.x2;\n        if (knobArea.x1 > knobArea.x2) {\n            kx1 = knobArea.x2;\n            kx2 = knobArea.x1;\n        }\n\n        let ky1 = knobArea.y1;\n        let ky2 = knobArea.y2;\n        if (knobArea.y1 > knobArea.y2) {\n            ky1 = knobArea.y2;\n            ky2 = knobArea.y1;\n        }\n        const knobPoint1 = cellToAbsCoordinate(kx1, ky1, rowSizes, columnSizes, dataOffset, cellWidth, cellHeight);\n        const knobPoint2 = cellToAbsCoordinate(\n            kx2 + 1,\n            ky2 + 1,\n            rowSizes,\n            columnSizes,\n            dataOffset,\n            cellWidth,\n            cellHeight\n        );\n        context.strokeStyle = knobAreaBorderColor;\n        context.setLineDash([3, 3]);\n        context.lineWidth = 1;\n        context.beginPath();\n        context.rect(knobPoint1.x, knobPoint1.y - 1, knobPoint2.x - knobPoint1.x, knobPoint2.y - knobPoint1.y);\n        context.stroke();\n        context.setLineDash([]);\n    }\n\n    // selection knob\n    if (selectionActive && !hideKnob) {\n        context.fillStyle = selBorderColor;\n        context.fillRect(p2.x - knobSize * 0.5, p2.y - knobSize * 0.5, knobSize, knobSize);\n    }\n\n    // content\n    context.textBaseline = 'middle';\n\n    // draw content\n    let yCoord = columnHeaderHeight;\n    for (const y of rowSizes.index) {\n        let xCoord = rowHeaderWidth;\n        const ch = cellHeight(y);\n        for (const x of columnSizes.index) {\n            const cellContent = displayData(x, y);\n            const cw = cellWidth(x);\n            if (cellContent !== null && cellContent !== undefined) {\n                const style = cellStyle(x, y);\n                drawCell(context, cellContent, style, defaultCellStyle, xCoord, yCoord, cw, ch);\n            }\n            xCoord += cw;\n        }\n        yCoord += ch;\n    }\n}\n\nfunction Sheet(props: SheetProps) {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const overlayRef = useRef<HTMLDivElement>(null);\n    const copyPasteTextAreaRef = useRef<HTMLTextAreaElement>(null);\n    const [maxScroll, setMaxScroll] = useState({ x: 5000, y: 5000 });\n    const [dataOffset, setDataOffset] = useState({ x: 0, y: 0 });\n    const [selection, setSelection] = useState({ x1: -1, y1: -1, x2: -1, y2: -1 });\n    const [knobArea, setKnobArea] = useState({ x1: -1, y1: -1, x2: -1, y2: -1 });\n    const [editCell, setEditCell] = useState({ x: -1, y: -1 });\n    const [editValue, setEditValue] = useState('');\n    const [arrowKeyCommitMode, setArrowKeyCommitMode] = useState(false);\n    const [shiftKeyDown, setShiftKeyDown] = useState(false);\n    const [knobDragInProgress, setKnobDragInProgress] = useState(false);\n    const [selectionInProgress, setSelectionInProgress] = useState(false);\n    const [columnResize, setColumnResize] = useState<any>(null);\n    const [rowResize, setRowResize] = useState<any>(null);\n    const [rowSelectionInProgress, setRowSelectionInProgress] = useState(false);\n    const [columnSelectionInProgress, setColumnSelectionInProgress] = useState(false);\n    const [buttonClickMouseDownCoordinates, setButtonClickMouseDownCoordinates] = useState<any>({\n        x: -1,\n        y: -1,\n        hitTarget: null,\n    });\n    const { width: canvasWidth = 3000, height: canvasHeight = 3000 } = useResizeObserver({ ref: canvasRef });\n\n    const freezeColumns = props.freezeColumns || 0;\n    const freezeRows = props.freezeRows || 0;\n\n    const cellWidth = useMemo(() => createRowOrColumnPropFunction(props.cellWidth, 100), [props.cellWidth]);\n    const cellHeight = useMemo(() => createRowOrColumnPropFunction(props.cellHeight, 22), [props.cellHeight]);\n    const columnHeaders = useMemo(() => createRowOrColumnPropFunction(props.columnHeaders, null), [\n        props.columnHeaders,\n    ]);\n    const columnHeaderStyle = useMemo(() => createRowOrColumnPropFunction(props.columnHeaderStyle, {}), [\n        props.columnHeaderStyle,\n    ]);\n\n    const cellReadOnly = useMemo(() => createCellPropFunction(props.readOnly, false), [props.readOnly]);\n\n    const sourceData = useMemo(() => createCellPropFunction(props.sourceData, ''), [props.sourceData]);\n    const displayData = useMemo(() => createCellPropFunction(props.displayData, ''), [props.displayData]);\n    const editData = useMemo(() => createCellPropFunction(props.editData, ''), [props.editData]);\n    const cellStyle = useMemo(() => createCellPropFunction(props.cellStyle, defaultCellStyle), [props.cellStyle]);\n\n    const columnSizes = useMemo(\n        () => calculateRowsOrColsSizes(freezeColumns, cellWidth, rowHeaderWidth, dataOffset.x, canvasWidth),\n        [props.freezeColumns, cellWidth, dataOffset.x, canvasWidth]\n    );\n\n    const rowSizes = useMemo(\n        () => calculateRowsOrColsSizes(freezeRows, cellHeight, columnHeaderHeight, dataOffset.y, canvasHeight),\n        [props.freezeRows, cellHeight, dataOffset.y, canvasHeight]\n    );\n\n    const changeSelection = (x1: number, y1: number, x2: number, y2: number, scrollToP2 = true) => {\n        setSelection({ x1, y1, x2, y2 });\n\n        if (scrollToP2) {\n            const newDataOffset = { x: dataOffset.x, y: dataOffset.y };\n            let newScrollLeft = -1;\n            let newScrollTop = -1;\n\n            if (!columnSizes.index.includes(x2) || columnSizes.index[columnSizes.index.length - 1] === x2) {\n                const increment = columnSizes.index[columnSizes.index.length - 1] <= x2 ? 1 : -1;\n                const newX = Math.max(dataOffset.x, freezeColumns) + increment;\n                newDataOffset.x = newX;\n                newScrollLeft = newX * scrollSpeed;\n            }\n\n            if (!rowSizes.index.includes(y2) || rowSizes.index[rowSizes.index.length - 1] === y2) {\n                const increment = rowSizes.index[rowSizes.index.length - 1] <= y2 ? 1 : -1;\n                const newY = Math.max(dataOffset.y, freezeRows) + increment;\n                newDataOffset.y = newY;\n                newScrollTop = newY * scrollSpeed;\n            }\n\n            if (newDataOffset.x !== dataOffset.x || dataOffset.y !== newDataOffset.y) {\n                setDataOffset({ x: newDataOffset.x, y: newDataOffset.y });\n                setTimeout(() => {\n                    if (overlayRef.current) {\n                        if (newScrollLeft !== -1) {\n                            overlayRef.current.scrollLeft = newScrollLeft;\n                        }\n                        if (newScrollTop !== -1) {\n                            overlayRef.current.scrollTop = newScrollTop;\n                        }\n                    }\n                }, 0);\n            }\n        }\n\n        if (props.onSelectionChanged) {\n            let sx1 = x1;\n            let sy1 = y1;\n            let sx2 = x2;\n            let sy2 = y2;\n            if (sx1 > sx2) {\n                sx1 = x2;\n                sx2 = x1;\n            }\n            if (sy1 > sy2) {\n                sy1 = y2;\n                sy2 = y1;\n            }\n            props.onSelectionChanged(sx1, sy1, sx2, sy2);\n        }\n    };\n\n    const knobCoordinates = useMemo(() => {\n        if (selection.x2 !== -1 && selection.y2 !== -1) {\n            let selx2 = selection.x2;\n            if (selection.x1 > selection.x2) {\n                selx2 = selection.x1;\n            }\n\n            let sely2 = selection.y2;\n            if (selection.y1 > selection.y2) {\n                sely2 = selection.y1;\n            }\n            const c = cellToAbsCoordinate(selx2, sely2, rowSizes, columnSizes, dataOffset, cellWidth, cellHeight);\n            return { x: c.x + cellWidth(selx2), y: c.y + cellHeight(sely2) };\n        }\n        return { x: -1, y: -1 };\n    }, [selection, rowSizes, columnSizes, dataOffset, cellWidth, cellHeight]);\n\n    const hitMap = useMemo(() => {\n        const hitM = {};\n        const canvas = canvasRef.current;\n        if (!canvas) {\n            return hitM;\n        }\n        resizeCanvas(canvas);\n        let yCoord = columnHeaderHeight;\n        for (const y of rowSizes.index) {\n            let xCoord = rowHeaderWidth;\n            for (const x of columnSizes.index) {\n                const cellContent = displayData(x, y);\n                if (cellContent === null || cellContent === undefined) {\n                    xCoord += cellWidth(x);\n                    continue;\n                }\n\n                const xx = xCoord;\n                const yy = yCoord + cellHeight(y) * 0.5;\n\n                if (Array.isArray(cellContent)) {\n                    for (const obj of cellContent) {\n                        if (obj.onClick) {\n                            const absX1 = xx + obj.x;\n                            const absY1 = yy + obj.y;\n                            const absX2 = absX1 + obj.width;\n                            const absY2 = absY1 + obj.height;\n\n                            const hitTarget = {\n                                cellX: x,\n                                cellY: y,\n                                x: absX1,\n                                y: absY1,\n                                w: obj.width,\n                                h: obj.height,\n                                onClick: obj.onClick,\n                            };\n\n                            // add to hit map\n                            const x1key = Math.floor(absX1 / xBinSize);\n                            const x2key = Math.floor(absX2 / xBinSize);\n\n                            const y1key = Math.floor(absY1 / yBinSize);\n                            const y2key = Math.floor(absY2 / yBinSize);\n\n                            for (let xkey = x1key; xkey <= x2key; xkey++) {\n                                if (!hitM[xkey]) {\n                                    hitM[xkey] = {};\n                                }\n                                const xbin = hitM[xkey];\n                                for (let ykey = y1key; ykey <= y2key; ykey++) {\n                                    if (!xbin[ykey]) {\n                                        xbin[ykey] = [];\n                                    }\n                                    xbin[ykey].push(hitTarget);\n                                }\n                            }\n                        }\n                    }\n                }\n                xCoord += cellWidth(x);\n            }\n            yCoord += cellHeight(y);\n        }\n        return hitM;\n    }, [displayData, props.cellWidth, props.cellHeight, dataOffset.x, dataOffset.y]);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        if (!canvas) {\n            return;\n        }\n        const context = canvas.getContext('2d');\n        if (!context) {\n            return;\n        }\n        let animationFrameId = window.requestAnimationFrame(() => {\n            renderOnCanvas(\n                context,\n                rowSizes,\n                columnSizes,\n                cellStyle,\n                cellWidth,\n                cellHeight,\n                selection,\n                knobDragInProgress,\n                columnHeaders,\n                columnHeaderStyle,\n                knobArea,\n                displayData,\n                dataOffset\n            );\n        });\n\n        return () => {\n            window.cancelAnimationFrame(animationFrameId);\n        };\n    }, [\n        canvasRef,\n        rowSizes,\n        columnSizes,\n        cellStyle,\n        cellWidth,\n        cellHeight,\n        selection,\n        knobDragInProgress,\n        columnHeaders,\n        columnHeaderStyle,\n        knobArea,\n        displayData,\n        dataOffset,\n    ]);\n\n    const setFocusToTextArea = () => {\n        if (copyPasteTextAreaRef.current) {\n            copyPasteTextAreaRef.current.focus({ preventScroll: true });\n            copyPasteTextAreaRef.current.select();\n        }\n    };\n\n    useEffect(() => {\n        if (!editMode) {\n            setCopyPasteText();\n            if (document.activeElement === copyPasteTextAreaRef.current) {\n                setFocusToTextArea();\n            } else {\n                const activeTagName = (document as any).activeElement.tagName.toLowerCase();\n                if (\n                    !(\n                        (activeTagName === 'div' && (document as any).activeElement.contentEditable === 'true') ||\n                        activeTagName === 'input' ||\n                        activeTagName === 'textarea' ||\n                        activeTagName === 'select'\n                    )\n                ) {\n                    setFocusToTextArea();\n                }\n            }\n        }\n    });\n\n    const onPaste = (e: any) => {\n        if (!copyPasteTextAreaRef) {\n            return;\n        }\n        if (e.target !== copyPasteTextAreaRef.current) {\n            return;\n        }\n        e.preventDefault();\n\n        const clipboardData = e.clipboardData || (window as any).clipboardData;\n        const types = clipboardData.types;\n        if (types.includes('text/html')) {\n            const pastedHtml = clipboardData.getData('text/html');\n            parsePastedHtml(pastedHtml);\n        } else if (types.includes('text/plain')) {\n            const text = clipboardData.getData('text/plain');\n            parsePastedText(text);\n        }\n    };\n\n    useEffect(() => {\n        window.document.addEventListener('paste', onPaste);\n        return () => {\n            window.document.removeEventListener('paste', onPaste);\n        };\n    });\n\n    const findTable = (element: any): any => {\n        for (const child of element.children) {\n            if (child.nodeName === 'TABLE') {\n                return child;\n            }\n            const maybeTable = findTable(child);\n            if (maybeTable) {\n                return maybeTable;\n            }\n        }\n    };\n\n    const parsePastedHtml = (html: string) => {\n        const div = document.createElement('div');\n        div.innerHTML = html.trim();\n        let pasteLocX = -1;\n        let pasteLocY = -1;\n        if (selection.x1 !== -1 && selection.x2 === -1) {\n            pasteLocX = selection.x1;\n        }\n        if (selection.y1 !== -1 && selection.y2 === -1) {\n            pasteLocY = selection.y1;\n        }\n        if (selection.x1 !== -1 && selection.x2 !== -1) {\n            pasteLocX = Math.min(selection.x1, selection.x2);\n        }\n        if (selection.y1 !== -1 && selection.y2 !== -1) {\n            pasteLocY = Math.min(selection.y1, selection.y2);\n        }\n        if (pasteLocX === -1 || pasteLocY === -1) {\n            return;\n        }\n\n        let x = pasteLocX;\n        let y = pasteLocY;\n        const changes = [];\n\n        const tableNode = findTable(div);\n        if (!tableNode) {\n            return;\n        }\n\n        for (const tableChild of tableNode.children) {\n            if (tableChild.nodeName === 'TBODY') {\n                for (const tr of tableChild.children) {\n                    x = pasteLocX;\n                    if (tr.nodeName === 'TR') {\n                        for (const td of tr.children) {\n                            if (td.nodeName === 'TD') {\n                                changes.push({ y: y, x: x, value: td.innerHTML });\n                                x++;\n                            }\n                        }\n                        y++;\n                    }\n                }\n            }\n        }\n\n        if (props.onChange) {\n            props.onChange(changes);\n        }\n        let pasteX2 = x - 1;\n        let pasteY2 = y - 1;\n        changeSelection(pasteLocX, pasteLocY, pasteX2, pasteY2, false);\n    };\n\n    const parsePastedText = (text: string) => {\n        let pasteLocX = -1;\n        let pasteLocY = -1;\n        if (selection.x1 !== -1 && selection.x2 === -1) {\n            pasteLocX = selection.x1;\n        }\n        if (selection.y1 !== -1 && selection.y2 === -1) {\n            pasteLocY = selection.y1;\n        }\n        if (selection.x1 !== -1 && selection.x2 !== -1) {\n            pasteLocX = Math.min(selection.x1, selection.x2);\n        }\n        if (selection.y1 !== -1 && selection.y2 !== -1) {\n            pasteLocY = Math.min(selection.y1, selection.y2);\n        }\n        if (pasteLocX === -1 || pasteLocY === -1) {\n            return;\n        }\n\n        const rows = text.split(/\\r?\\n/);\n        let pasteX2 = pasteLocX;\n        let pasteY2 = pasteLocY + rows.length - 1;\n        const changes = [];\n        for (let y = 0; y < rows.length; y++) {\n            const cols = rows[y].split('\\t');\n\n            if (pasteLocX + cols.length - 1 > pasteX2) {\n                pasteX2 = pasteLocX + cols.length - 1;\n            }\n            for (let x = 0; x < cols.length; x++) {\n                changes.push({ y: pasteLocY + y, x: pasteLocX + x, value: cols[x] });\n            }\n        }\n\n        if (props.onChange) {\n            props.onChange(changes);\n        }\n        changeSelection(pasteLocX, pasteLocY, pasteX2, pasteY2, false);\n    };\n\n    const setCopyPasteText = () => {\n        if (selection.x1 === -1 || selection.y1 === -1 || selection.x2 === -1 || selection.y2 === -1) {\n            return;\n        }\n\n        let dy1 = selection.y1;\n        let dy2 = selection.y2;\n        if (dy1 > dy2) {\n            dy1 = selection.y2;\n            dy2 = selection.y1;\n        }\n\n        let dx1 = selection.x1;\n        let dx2 = selection.x2;\n        if (dx1 > dx2) {\n            dx1 = selection.x2;\n            dx2 = selection.x1;\n        }\n\n        const rows = [];\n        for (let y = dy1; y <= dy2; y++) {\n            const row = [];\n            for (let x = dx1; x <= dx2; x++) {\n                const value = editData(x, y);\n                if (value !== null && value !== undefined) {\n                    row.push(value);\n                } else {\n                    row.push('');\n                }\n            }\n            rows.push(row.join('\\t'));\n        }\n        const cptext = rows.join('\\n');\n        if (copyPasteTextAreaRef.current) {\n            copyPasteTextAreaRef.current.value = cptext;\n        }\n    };\n\n    const commitEditingCell = () => {\n        if (props.onChange) {\n            props.onChange([{ x: editCell.x, y: editCell.y, value: editValue }]);\n        }\n\n        setEditCell({ x: -1, y: -1 });\n    };\n\n    const startEditingCell = (editCell: CellCoordinate) => {\n        if (cellReadOnly(editCell.x, editCell.y)) {\n            return;\n        }\n\n        const editDataValue = editData(editCell.x, editCell.y);\n        let val = '';\n        if (editDataValue !== null && editDataValue !== undefined) {\n            val = editDataValue;\n        }\n        setEditCell(editCell);\n        setEditValue(val);\n    };\n\n    const onScroll = (e: UIEvent) => {\n        if (!e.target || !(e.target instanceof Element)) {\n            return;\n        }\n        const absX = e.target.scrollLeft;\n        const absY = e.target.scrollTop;\n\n        const cellX = Math.floor(absX / scrollSpeed);\n        const cellY = Math.floor(absY / scrollSpeed);\n        if (cellX !== dataOffset.x || cellY !== dataOffset.y) {\n            setDataOffset({ x: cellX, y: cellY });\n        }\n\n        let newMaxScroll = { ...maxScroll };\n        if (maxScroll.x / (absX + 0.5) < 1) {\n            newMaxScroll.x *= 1.5;\n        }\n        if (maxScroll.y / (absY + 0.5) < 1) {\n            newMaxScroll.y *= 1.5;\n        }\n        if (newMaxScroll.x !== maxScroll.x || maxScroll.y !== newMaxScroll.y) {\n            setMaxScroll({ ...newMaxScroll });\n        }\n    };\n\n    const onMouseLeave = () => {\n        window.document.body.style.cursor = 'auto';\n    };\n\n    const onMouseDown = (e: MouseEvent) => {\n        if (e.button !== 0) {\n            return;\n        }\n        if (!e.target || !(e.target instanceof Element)) {\n            return;\n        }\n        const rect = e.target.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        if (x > canvasWidth || y > canvasHeight) {\n            return;\n        }\n\n        const hitTargetKeyX = Math.floor(x / xBinSize);\n        const hitTargetKeyY = Math.floor(y / yBinSize);\n\n        if (hitMap[hitTargetKeyX] && hitMap[hitTargetKeyX][hitTargetKeyY]) {\n            for (const hitTarget of hitMap[hitTargetKeyX][hitTargetKeyY]) {\n                if (\n                    hitTarget.x <= x &&\n                    x <= hitTarget.x + hitTarget.w &&\n                    hitTarget.y <= y &&\n                    y <= hitTarget.y + hitTarget.h\n                ) {\n                    setButtonClickMouseDownCoordinates({ x, y, hitTarget });\n                    return;\n                }\n            }\n        }\n\n        if (y < columnHeaderHeight) {\n            let xx = rowHeaderWidth;\n            for (const col of columnSizes.index) {\n                if (Math.abs(xx - x) < resizeColumnRowMouseThreshold) {\n                    window.document.body.style.cursor = 'col-resize';\n                    setColumnResize({\n                        startX: xx,\n                        oldWidth: cellWidth(col - 1),\n                        colIdx: col - 1,\n                    });\n                    return;\n                }\n                xx += cellWidth(col);\n            }\n        }\n        if (x < rowHeaderWidth) {\n            let yy = columnHeaderHeight;\n            for (const row of rowSizes.index) {\n                if (Math.abs(yy - y) < resizeColumnRowMouseThreshold) {\n                    window.document.body.style.cursor = 'row-resize';\n                    setRowResize({\n                        startY: yy,\n                        oldHeight: cellHeight(row - 1),\n                        rowIdx: row - 1,\n                    });\n                    return;\n                }\n                yy += cellHeight(row);\n            }\n        }\n\n        // knob drag mode\n        if (Math.abs(x - knobCoordinates.x) < knobSize && Math.abs(y - knobCoordinates.y) < knobSize) {\n            setKnobDragInProgress(true);\n            setKnobArea({ x1: selection.x1, y1: selection.y1, x2: selection.x2, y2: selection.y2 });\n            return;\n        }\n\n        const sel2 = absCoordianteToCell(x, y, rowSizes, columnSizes);\n        const sel1 = shiftKeyDown ? { x: selection.x1, y: selection.y1 } : { ...sel2 };\n\n        if (editMode) {\n            commitEditingCell();\n        }\n\n        let scrollToP2 = true;\n\n        if (x < rowHeaderWidth) {\n            sel2.x = 100;\n            scrollToP2 = false;\n            setRowSelectionInProgress(true);\n        } else {\n            setRowSelectionInProgress(false);\n        }\n\n        if (y < columnHeaderHeight) {\n            sel2.y = 100;\n            scrollToP2 = false;\n            setColumnSelectionInProgress(true);\n        } else {\n            setColumnSelectionInProgress(false);\n        }\n\n        setSelectionInProgress(true);\n        changeSelection(sel1.x, sel1.y, sel2.x, sel2.y, scrollToP2);\n        setEditCell({ x: -1, y: -1 });\n    };\n\n    const onMouseUp = (e: MouseEvent) => {\n        if (knobDragInProgress) {\n            let sx1 = selection.x1;\n            let sx2 = selection.x2;\n            if (selection.x1 > selection.x2) {\n                sx1 = selection.x2;\n                sx2 = selection.x1;\n            }\n            let sy1 = selection.y1;\n            let sy2 = selection.y2;\n            if (selection.y1 > selection.y2) {\n                sy1 = selection.y2;\n                sy2 = selection.y1;\n            }\n            let kx1 = knobArea.x1;\n            let kx2 = knobArea.x2;\n            if (knobArea.x1 > knobArea.x2) {\n                kx1 = knobArea.x2;\n                kx2 = knobArea.x1;\n            }\n            let ky1 = knobArea.y1;\n            let ky2 = knobArea.y2;\n            if (knobArea.y1 > knobArea.y2) {\n                ky1 = knobArea.y2;\n                ky2 = knobArea.y1;\n            }\n\n            let fx1 = kx1;\n            let fy1 = ky1;\n            let fx2 = kx2;\n            let fy2 = ky2;\n\n            const changes: Array<Change> = [];\n\n            if (fx2 - fx1 === sx2 - sx1) {\n                // vertical\n                if (fy1 === sy1) {\n                    fy1 = sy2 + 1;\n                } else {\n                    fy2 = sy1 - 1;\n                }\n\n                let srcY = sy1;\n                for (let y = fy1; y <= fy2; y++) {\n                    for (let x = fx1; x <= fx2; x++) {\n                        const value = sourceData(x, srcY);\n                        changes.push({ x: x, y: y, value: value });\n                    }\n                    srcY = srcY + 1;\n                    if (srcY > sy2) {\n                        srcY = sy1;\n                    }\n                }\n            } else {\n                // horizontal\n                if (fx1 === sx1) {\n                    fx1 = sx2 + 1;\n                } else {\n                    fx2 = sx1 - 1;\n                }\n                let srcX = sx1;\n                for (let x = fx1; x <= fx2; x++) {\n                    for (let y = fy1; y <= fy2; y++) {\n                        const value = sourceData(srcX, y);\n                        changes.push({ x: x, y: y, value: value });\n                    }\n                    srcX = srcX + 1;\n                    if (srcX > sx2) {\n                        srcX = sx1;\n                    }\n                }\n            }\n\n            if (props.onChange) {\n                props.onChange(changes);\n            }\n\n            changeSelection(knobArea.x1, knobArea.y1, knobArea.x2, knobArea.y2);\n        }\n        setSelectionInProgress(false);\n        setRowSelectionInProgress(false);\n        setColumnSelectionInProgress(false);\n        setKnobDragInProgress(false);\n        setColumnResize(null);\n        setRowResize(null);\n\n        if (\n            buttonClickMouseDownCoordinates.x !== -1 &&\n            buttonClickMouseDownCoordinates.y !== -1 &&\n            buttonClickMouseDownCoordinates.hitTarget !== null\n        ) {\n            if (!e.target || !(e.target instanceof Element)) {\n                return;\n            }\n            const rect = e.target.getBoundingClientRect();\n            const x = e.clientX - rect.left;\n            const y = e.clientY - rect.top;\n            const hitTarget = buttonClickMouseDownCoordinates.hitTarget;\n            if (\n                hitTarget.x <= x &&\n                x <= hitTarget.x + hitTarget.w &&\n                hitTarget.y <= y &&\n                y <= hitTarget.y + hitTarget.h\n            ) {\n                hitTarget.onClick();\n            }\n            setButtonClickMouseDownCoordinates({ x: -1, y: -1, hitTarget: null });\n        }\n    };\n\n    useEffect(() => {\n        window.addEventListener('mouseup', onMouseUp as any);\n        return () => {\n            window.removeEventListener('mouseup', onMouseUp as any);\n        };\n    });\n\n    const onMouseMove = (e: MouseEvent) => {\n        if (!e.target || !(e.target instanceof Element)) {\n            return;\n        }\n        const rect = e.target.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        window.document.body.style.cursor = 'auto';\n\n        const hitTargetKeyX = Math.floor(x / xBinSize);\n        const hitTargetKeyY = Math.floor(y / yBinSize);\n\n        if (hitMap[hitTargetKeyX] && hitMap[hitTargetKeyX][hitTargetKeyY]) {\n            for (const hitTarget of hitMap[hitTargetKeyX][hitTargetKeyY]) {\n                if (\n                    hitTarget.x <= x &&\n                    x <= hitTarget.x + hitTarget.w &&\n                    hitTarget.y <= y &&\n                    y <= hitTarget.y + hitTarget.h\n                ) {\n                    window.document.body.style.cursor = 'pointer';\n                }\n            }\n        }\n\n        if (props.onCellWidthChange && y < columnHeaderHeight) {\n            let xx = rowHeaderWidth;\n            for (const col of columnSizes.index) {\n                if (Math.abs(xx - x) < resizeColumnRowMouseThreshold) {\n                    window.document.body.style.cursor = 'col-resize';\n                    break;\n                }\n                xx += cellWidth(col);\n            }\n        }\n\n        if (props.onCellHeightChange && x < rowHeaderWidth) {\n            let yy = columnHeaderHeight;\n            for (const row of rowSizes.index) {\n                if (Math.abs(yy - y) < resizeColumnRowMouseThreshold) {\n                    window.document.body.style.cursor = 'row-resize';\n                    break;\n                }\n                yy += cellHeight(row);\n            }\n        }\n\n        if (Math.abs(x - knobCoordinates.x) < knobSize && Math.abs(y - knobCoordinates.y) < knobSize) {\n            window.document.body.style.cursor = 'crosshair';\n        }\n\n        if (columnResize) {\n            if (props.onCellWidthChange) {\n                const newWidth = Math.max(columnResize.oldWidth + x - columnResize.startX, minimumColumnWidth);\n                props.onCellWidthChange(columnResize.colIdx, newWidth);\n            }\n            return;\n        }\n\n        if (rowResize) {\n            if (props.onCellHeightChange) {\n                const newHeight = Math.max(rowResize.oldHeight + y - rowResize.startY, minimumRowHeight);\n                props.onCellHeightChange(rowResize.rowIdx, newHeight);\n            }\n            return;\n        }\n\n        if (selectionInProgress) {\n            const sel2 = absCoordianteToCell(x, y, rowSizes, columnSizes);\n            if (rowSelectionInProgress) {\n                changeSelection(selection.x1, selection.y1, selection.x2, sel2.y, false);\n            } else if (columnSelectionInProgress) {\n                changeSelection(selection.x1, selection.y1, sel2.x, selection.y2, false);\n            } else {\n                changeSelection(selection.x1, selection.y1, sel2.x, sel2.y);\n            }\n        }\n\n        if (knobDragInProgress) {\n            window.document.body.style.cursor = 'crosshair';\n            const cell = absCoordianteToCell(x, y, rowSizes, columnSizes);\n\n            let x1 = selection.x1;\n            let y1 = selection.y1;\n            let x2 = selection.x2;\n            let y2 = selection.y2;\n            if (x1 > x2) {\n                x1 = selection.x2;\n                x2 = selection.x1;\n            }\n            if (y1 > y2) {\n                y1 = selection.y2;\n                y2 = selection.y1;\n            }\n\n            // check if vertical or horizontal\n            if (Math.abs(cell.x - (x1 + x2) * 0.5) < Math.abs(cell.y - (y1 + y2) * 0.5)) {\n                if (cell.y < y1) {\n                    y1 = cell.y;\n                } else {\n                    y2 = cell.y;\n                }\n            } else {\n                if (cell.x < x1) {\n                    x1 = cell.x;\n                } else {\n                    x2 = cell.x;\n                }\n            }\n            setKnobArea({ x1: x1, y1: y1, x2: x2, y2: y2 });\n        }\n    };\n\n    const onDoubleClick = (e: MouseEvent) => {\n        if (!e.target || !(e.target instanceof Element)) {\n            return;\n        }\n        const rect = e.target.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        const editCell = absCoordianteToCell(x, y, rowSizes, columnSizes);\n        setArrowKeyCommitMode(false);\n        startEditingCell(editCell);\n    };\n\n    const onKeyDown = (e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n            setEditCell({ x: -1, y: -1 });\n            return;\n        }\n        if (e.key === 'Enter') {\n            commitEditingCell();\n            changeSelection(selection.x1, selection.y1 + 1, selection.x1, selection.y1 + 1);\n        }\n        if (e.key === 'Tab') {\n            e.preventDefault();\n            commitEditingCell();\n            changeSelection(selection.x1 + 1, selection.y1, selection.x1 + 1, selection.y1);\n        }\n        if (arrowKeyCommitMode && ['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown'].includes(e.key)) {\n            e.preventDefault();\n            commitEditingCell();\n            let x1 = selection.x1;\n            let y1 = selection.y1;\n            let x2 = selection.x1;\n            let y2 = selection.y1;\n            if (e.key === 'ArrowRight') {\n                x1 = selection.x1 + 1;\n                x2 = selection.x1 + 1;\n            } else if (e.key === 'ArrowLeft') {\n                x1 = selection.x1 - 1;\n                x2 = selection.x1 - 1;\n            } else if (e.key === 'ArrowUp') {\n                y1 = selection.y1 - 1;\n                y2 = selection.y1 - 1;\n            } else if (e.key === 'ArrowDown') {\n                y1 = selection.y1 + 1;\n                y2 = selection.y1 + 1;\n            }\n            changeSelection(x1, y1, x2, y2);\n        }\n    };\n\n    const onGridKeyDown = (e: KeyboardEvent) => {\n        if (editMode && arrowKeyCommitMode && ['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown'].includes(e.key)) {\n            commitEditingCell();\n            return;\n        }\n\n        if (e.key === 'Shift') {\n            setShiftKeyDown(true);\n            return;\n        }\n\n        if ((e.metaKey || e.ctrlKey) && String.fromCharCode(e.which).toLowerCase() === 'v') {\n            return;\n        }\n\n        // copy\n        if ((e.metaKey || e.ctrlKey) && String.fromCharCode(e.which).toLowerCase() === 'c') {\n            return;\n        }\n\n        if (e.key === 'Backspace' || e.key === 'Delete') {\n            let x1 = selection.x1;\n            let y1 = selection.y1;\n            let x2 = selection.x2;\n            let y2 = selection.y2;\n            if (x1 > x2) {\n                x1 = selection.x2;\n                x2 = selection.x1;\n            }\n            if (y1 > y2) {\n                y1 = selection.y2;\n                y2 = selection.y1;\n            }\n            const changes: Change[] = [];\n            for (let y = y1; y <= y2; y++) {\n                for (let x = x1; x <= x2; x++) {\n                    changes.push({ x: x, y: y, value: null });\n                }\n            }\n            if (props.onChange) {\n                props.onChange(changes);\n            }\n            return;\n        }\n\n        // nothing selected\n        if (selection.x1 === -1 || selection.x2 === -1 || selection.y1 === -1 || selection.y2 === -1) {\n            return;\n        }\n\n        if (\n            (e.keyCode >= 48 && e.keyCode <= 57) ||\n            (e.keyCode >= 96 && e.keyCode <= 105) ||\n            (e.keyCode >= 65 && e.keyCode <= 90) ||\n            e.key === 'Enter' ||\n            e.key === '-' ||\n            e.key === '.' ||\n            e.key === ','\n        ) {\n            if (cellReadOnly(selection.x1, selection.y1)) {\n                e.preventDefault(); // so we dont get keystrokes inside the text area\n                return;\n            }\n\n            startEditingCell({ x: selection.x1, y: selection.y1 });\n            setArrowKeyCommitMode(e.key !== 'Enter');\n            return;\n        }\n\n        if (['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown'].includes(e.key)) {\n            let sel1 = { x: selection.x1, y: selection.y1 };\n            let sel2 = { x: selection.x2, y: selection.y2 };\n\n            if (e.key === 'ArrowRight' || e.key === 'Tab') {\n                sel2.x += 1;\n            } else if (e.key === 'ArrowLeft') {\n                sel2.x -= 1;\n            } else if (e.key === 'ArrowUp') {\n                sel2.y -= 1;\n            } else if (e.key === 'ArrowDown') {\n                sel2.y += 1;\n            }\n            if (sel2.x < 0) {\n                sel2.x = 0;\n            }\n            if (sel2.y < 0) {\n                sel2.y = 0;\n            }\n            if (!e.shiftKey) {\n                sel1 = { ...sel2 };\n            }\n            changeSelection(sel1.x, sel1.y, sel2.x, sel2.y);\n            return;\n        }\n        e.preventDefault();\n    };\n\n    const onGridKeyUp = (e: KeyboardEvent) => {\n        setShiftKeyDown(e.shiftKey);\n    };\n\n    const onContextMenu = (e: MouseEvent) => {\n        if (!props.onRightClick) {\n            return;\n        }\n        if (!e.target || !(e.target instanceof Element)) {\n            return;\n        }\n\n        const rect = e.target.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        const cell = absCoordianteToCell(x, y, rowSizes, columnSizes);\n\n        if (y > columnHeaderHeight && x > rowHeaderWidth) {\n            onMouseMove(e);\n            const ev: SheetMouseEvent = {\n                ...e,\n                cellX: cell.x,\n                cellY: cell.y,\n            };\n            props.onRightClick(ev);\n        }\n    };\n\n    const editMode = editCell.x !== -1 && editCell.y !== -1;\n    let editTextPosition = { x: 0, y: 0 };\n    let editTextWidth = 0;\n    let editTextHeight = 0;\n    let editTextTextAlign: 'right' | 'left' | 'center' = 'right';\n    if (editMode) {\n        editTextPosition = cellToAbsCoordinate(\n            editCell.x,\n            editCell.y,\n            rowSizes,\n            columnSizes,\n            dataOffset,\n            cellWidth,\n            cellHeight\n        );\n        const style = cellStyle(editCell.x, editCell.y);\n        // add 1 so it doesnt cover the selection border\n        editTextPosition.x += 1;\n        editTextPosition.y += 1;\n        editTextWidth = cellWidth(editCell.x) - 2;\n        editTextHeight = cellHeight(editCell.y) - 2;\n        editTextTextAlign = style.textAlign || defaultCellStyle.textAlign || 'left';\n    }\n\n    return (\n        <div style={{ position: 'relative', height: '100%' }}>\n            <canvas\n                style={{\n                    width: 'calc(100% - 14px)',\n                    height: 'calc(100% - 15px)',\n                    outline: '1px solid #ddd', // find another better solution ?\n                }}\n                ref={canvasRef}\n            />\n            <div\n                ref={overlayRef}\n                onDoubleClick={onDoubleClick}\n                onMouseDown={onMouseDown}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onContextMenu={onContextMenu}\n                onScroll={onScroll}\n                className={styles.sheetscroll}\n                style={{\n                    position: 'absolute',\n                    width: '100%',\n                    height: '100%',\n                    top: 0,\n                    left: 0,\n                    overflow: 'scroll',\n                    borderBottom: '1px solid #ddd',\n                }}\n            >\n                <div\n                    style={{\n                        position: 'absolute',\n                        left: 0,\n                        top: 0,\n                        width: 1,\n                        height: maxScroll.y + 2000,\n                        backgroundColor: 'rgba(0,0,0,0.0)',\n                    }}\n                ></div>\n                <div\n                    style={{\n                        position: 'absolute',\n                        left: 0,\n                        top: 0,\n                        width: maxScroll.x + 5000,\n                        height: 1,\n                        backgroundColor: 'rgba(0,0,0,0.0)',\n                    }}\n                ></div>\n            </div>\n            <textarea\n                style={{ position: 'absolute', top: 0, left: 0, width: 1, height: 1, opacity: 0.01 }}\n                ref={copyPasteTextAreaRef}\n                onFocus={(e) => e.target.select()}\n                tabIndex={0}\n                onKeyDown={onGridKeyDown}\n                onKeyUp={onGridKeyUp}\n            ></textarea>\n\n            {editMode && (\n                <input\n                    type=\"text\"\n                    onFocus={(e) => e.target.select()}\n                    autoFocus\n                    onKeyDown={onKeyDown}\n                    value={editValue}\n                    onChange={(e) => setEditValue(e.target.value)}\n                    style={{\n                        position: 'absolute',\n                        top: editTextPosition.y,\n                        left: editTextPosition.x,\n                        width: editTextWidth,\n                        height: editTextHeight,\n                        outline: 'none',\n                        border: 'none',\n                        textAlign: editTextTextAlign,\n                        color: 'black',\n                        fontSize: defaultCellStyle.fontSize,\n                        fontFamily: 'sans-serif',\n                    }}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default Sheet;\n","import React, { useState, useEffect } from 'react';\nimport Sheet from 'sheet-happens';\nimport 'sheet-happens/dist/index.css';\n\nconst initialDataBig = [];\nfor (let row = 0; row < 1000; row++) {\n    const r = [];\n    for (let col = 0; col < 100; col++) {\n        r.push(`Row: ${row}, Col: ${col}`);\n    }\n    initialDataBig.push(r);\n}\n\nconst initialDataBasic = [\n    ['First', 'Second', 'Third', 'Fourth', 'Fifth', 'Sixth'],\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5, 6],\n];\n\nconst initialDataFormatting = [];\nfor (let row = 0; row < 1000; row++) {\n    const r = [];\n    for (let col = 0; col < 100; col++) {\n        r.push(Math.random() * 1000000);\n    }\n    initialDataFormatting.push(r);\n}\n\nexport function SheetBoxHeader() {\n    const [data, setData] = useState(initialDataBig);\n    const [cellWidth, setCellWidth] = useState(Array(100).fill(150));\n    const [cellHeight, setCellHeight] = useState([]);\n\n    const onSelectionChanged = (x1, y1, x2, y2) => {};\n    const onRightClick = () => {};\n    const columnHeaders = ['A', 'B', 'C'];\n    const cellStyle = (x, y) => {\n        return {};\n    };\n    const editData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const displayData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const sourceData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n\n    const onChange = (changes) => {\n        const newData = [...data];\n        for (const change of changes) {\n            if (!newData[change.y]) {\n                newData[change.y] = [];\n            }\n            newData[change.y][change.x] = change.value;\n        }\n        setData(newData);\n    };\n\n    const isReadOnly = (x, y) => {\n        return false;\n    };\n\n    const onCellWidthChange = (columnIdx, newWidth) => {\n        const cw = [...cellWidth];\n        if (columnIdx > cw.length) {\n            for (let i = cw.length; i <= columnIdx; i++) {\n                cw.push(150);\n            }\n        }\n        cw[columnIdx] = newWidth;\n        setCellWidth(cw);\n    };\n    const onCellHeightChange = (rowIdx, newHeight) => {\n        const ch = [...cellHeight];\n        if (rowIdx > ch.length) {\n            for (let i = ch.length; i <= rowIdx; i++) {\n                ch.push(22);\n            }\n        }\n        ch[rowIdx] = newHeight;\n        setCellHeight(ch);\n    };\n\n    return (\n        <div className=\"sheet-box\">\n            <Sheet\n                onSelectionChanged={onSelectionChanged}\n                onRightClick={onRightClick}\n                columnHeaders={columnHeaders}\n                cellStyle={cellStyle}\n                editData={editData}\n                displayData={displayData}\n                sourceData={sourceData}\n                cellWidth={cellWidth}\n                cellHeight={cellHeight}\n                onChange={onChange}\n                readOnly={isReadOnly}\n                onCellWidthChange={onCellWidthChange}\n                onCellHeightChange={onCellHeightChange}\n                freezeColumns={0}\n                freezeRows={0}\n            />\n        </div>\n    );\n}\n\nexport function SheetBoxBasic() {\n    const [data, setData] = useState(JSON.parse(JSON.stringify(initialDataBasic)));\n    const [cellWidth, setCellWidth] = useState([]);\n    const [cellHeight, setCellHeight] = useState([]);\n\n    const onSelectionChanged = (x1, y1, x2, y2) => {};\n    const onRightClick = () => {};\n    const columnHeaders = ['A', 'B', 'C'];\n    const cellStyle = (x, y) => {\n        return {};\n    };\n    const editData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const displayData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const sourceData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n\n    const onChange = (changes) => {\n        const newData = [...data];\n        for (const change of changes) {\n            if (!newData[change.y]) {\n                newData[change.y] = [];\n            }\n            newData[change.y][change.x] = change.value;\n        }\n        setData(newData);\n    };\n\n    const isReadOnly = (x, y) => {\n        return false;\n    };\n\n    const onCellWidthChange = (columnIdx, newWidth) => {\n        const cw = [...cellWidth];\n        if (columnIdx > cw.length) {\n            for (let i = cw.length; i <= columnIdx; i++) {\n                cw.push(100);\n            }\n        }\n        cw[columnIdx] = newWidth;\n        setCellWidth(cw);\n    };\n    const onCellHeightChange = (rowIdx, newHeight) => {\n        const ch = [...cellHeight];\n        if (rowIdx > ch.length) {\n            for (let i = ch.length; i <= rowIdx; i++) {\n                ch.push(22);\n            }\n        }\n        ch[rowIdx] = newHeight;\n        setCellHeight(ch);\n    };\n\n    return (\n        <div className=\"sheet-box\">\n            <Sheet\n                onSelectionChanged={onSelectionChanged}\n                onRightClick={onRightClick}\n                columnHeaders={columnHeaders}\n                cellStyle={cellStyle}\n                editData={editData}\n                displayData={displayData}\n                sourceData={sourceData}\n                cellWidth={cellWidth}\n                cellHeight={cellHeight}\n                onChange={onChange}\n                readOnly={isReadOnly}\n                onCellWidthChange={onCellWidthChange}\n                onCellHeightChange={onCellHeightChange}\n                freezeColumns={0}\n                freezeRows={0}\n            />\n        </div>\n    );\n}\n\nexport function SheetBoxStyle() {\n    const [data, setData] = useState(JSON.parse(JSON.stringify(initialDataBasic)));\n    const [cellWidth, setCellWidth] = useState([]);\n    const [cellHeight, setCellHeight] = useState([]);\n\n    const onSelectionChanged = (x1, y1, x2, y2) => {};\n    const onRightClick = () => {};\n    const columnHeaders = [];\n    const colors = ['#f00', '#0f0', '#00f', '#000'];\n    const alignment = ['left', 'right', 'center'];\n    const weight = ['normal', 'bold', 'lighter'];\n    const marginRight = [0, 0, 0, 0, 20];\n    const cellStyle = (x, y) => {\n        if (x === 0 || y === 0) {\n            return {\n                fillColor: '#6DA2FB22',\n            };\n        }\n        return {\n            color: colors[y % 4],\n            textAlign: alignment[x % 3],\n            marginRight: marginRight[x % 5],\n            weight: weight[y % 3],\n        };\n    };\n    const editData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const displayData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const sourceData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const onChange = (changes) => {\n        const newData = [...data];\n        for (const change of changes) {\n            if (!newData[change.y]) {\n                newData[change.y] = [];\n            }\n            newData[change.y][change.x] = change.value;\n        }\n        setData(newData);\n    };\n\n    const isReadOnly = (x, y) => {\n        return false;\n    };\n\n    const onCellWidthChange = (columnIdx, newWidth) => {\n        const cw = [...cellWidth];\n        if (columnIdx > cw.length) {\n            for (let i = cw.length; i <= columnIdx; i++) {\n                cw.push(100);\n            }\n        }\n        cw[columnIdx] = newWidth;\n        setCellWidth(cw);\n    };\n    const onCellHeightChange = (rowIdx, newHeight) => {\n        const ch = [...cellHeight];\n        if (rowIdx > ch.length) {\n            for (let i = ch.length; i <= rowIdx; i++) {\n                ch.push(22);\n            }\n        }\n        ch[rowIdx] = newHeight;\n        setCellHeight(ch);\n    };\n\n    return (\n        <div className=\"sheet-box\">\n            <Sheet\n                onSelectionChanged={onSelectionChanged}\n                onRightClick={onRightClick}\n                columnHeaders={columnHeaders}\n                cellStyle={cellStyle}\n                editData={editData}\n                displayData={displayData}\n                sourceData={sourceData}\n                cellWidth={cellWidth}\n                cellHeight={cellHeight}\n                onChange={onChange}\n                readOnly={isReadOnly}\n                onCellWidthChange={onCellWidthChange}\n                onCellHeightChange={onCellHeightChange}\n                freezeColumns={1}\n                freezeRows={1}\n            />\n        </div>\n    );\n}\n\nexport function SheetBoxFormatting() {\n    const [data, setData] = useState(initialDataFormatting);\n    const [cellWidth, setCellWidth] = useState([]);\n    const [cellHeight, setCellHeight] = useState([]);\n\n    const cellStyle = (x, y) => {\n        return {};\n    };\n    const editData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const displayData = (x, y) => {\n        return data?.[y]?.[x]?.toFixed?.(2);\n    };\n    const sourceData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n\n    const onChange = (changes) => {\n        const newData = [...data];\n        for (const change of changes) {\n            if (!newData[change.y]) {\n                newData[change.y] = [];\n            }\n            newData[change.y][change.x] = Number(change.value);\n        }\n        setData(newData);\n    };\n\n    const isReadOnly = (x, y) => {\n        return false;\n    };\n\n    const onCellWidthChange = (columnIdx, newWidth) => {\n        const cw = [...cellWidth];\n        if (columnIdx > cw.length) {\n            for (let i = cw.length; i <= columnIdx; i++) {\n                cw.push(100);\n            }\n        }\n        cw[columnIdx] = newWidth;\n        setCellWidth(cw);\n    };\n    const onCellHeightChange = (rowIdx, newHeight) => {\n        const ch = [...cellHeight];\n        if (rowIdx > ch.length) {\n            for (let i = ch.length; i <= rowIdx; i++) {\n                ch.push(22);\n            }\n        }\n        ch[rowIdx] = newHeight;\n        setCellHeight(ch);\n    };\n\n    return (\n        <div className=\"sheet-box\">\n            <Sheet\n                cellStyle={cellStyle}\n                editData={editData}\n                displayData={displayData}\n                sourceData={sourceData}\n                cellWidth={cellWidth}\n                cellHeight={cellHeight}\n                onChange={onChange}\n                readOnly={isReadOnly}\n                onCellWidthChange={onCellWidthChange}\n                onCellHeightChange={onCellHeightChange}\n                freezeColumns={0}\n                freezeRows={0}\n            />\n        </div>\n    );\n}\n\nexport function SheetBoxVeryBigData() {\n    const [loadingStatus, setLoadingStatus] = useState('initial');\n    const [data, setData] = useState([]);\n    const [cellWidth, setCellWidth] = useState([]);\n    const [cellHeight, setCellHeight] = useState([]);\n\n    const loadClick = (e) => {\n        e.preventDefault();\n        setLoadingStatus('loading');\n        fetch('./out.json')\n            .then((response) => {\n                return response.json();\n            })\n            .then((dataset) => {\n                setData(dataset);\n                setLoadingStatus('done');\n            });\n    };\n\n    const cellStyle = (x, y) => {\n        if (y === 0) {\n            return {\n                weight: 'bold',\n                fontSize: 14,\n            };\n        }\n        if (x === 4) {\n            return {\n                textAlign: 'right',\n            };\n        } else if (x === 1) {\n            return {\n                weight: 'bold',\n                color: '#3b85ff',\n            };\n        } else if (x === 2) {\n            return {\n                color: '#fc3bff',\n            };\n        }\n        return {};\n    };\n    const editData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const displayData = (x, y) => {\n        if (x === 4 && y > 0) {\n            if (data && data[y] && data[y][x]) {\n                return Number(data[y][x]).toFixed(2);\n            } else {\n                return '';\n            }\n        }\n        return data?.[y]?.[x];\n    };\n    const sourceData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n\n    const onChange = (changes) => {\n        const newData = [...data];\n        for (const change of changes) {\n            if (!newData[change.y]) {\n                newData[change.y] = [];\n            }\n            newData[change.y][change.x] = change.value;\n        }\n        setData(newData);\n    };\n\n    const isReadOnly = (x, y) => {\n        return false;\n    };\n\n    const onCellWidthChange = (columnIdx, newWidth) => {\n        const cw = [...cellWidth];\n        if (columnIdx > cw.length) {\n            for (let i = cw.length; i <= columnIdx; i++) {\n                cw.push(100);\n            }\n        }\n        cw[columnIdx] = newWidth;\n        setCellWidth(cw);\n    };\n    const onCellHeightChange = (rowIdx, newHeight) => {\n        const ch = [...cellHeight];\n        if (rowIdx > ch.length) {\n            for (let i = ch.length; i <= rowIdx; i++) {\n                ch.push(22);\n            }\n        }\n        ch[rowIdx] = newHeight;\n        setCellHeight(ch);\n    };\n\n    const headerStyle = (index) => {\n        const r = ((index * 2421) % 255).toString(16).padStart(2, '0');\n        const g = ((index * 3215) % 255).toString(16).padStart(2, '0');\n        const b = ((index * 1243) % 255).toString(16).padStart(2, '0');\n        const color = `#${r}${g}${b}55`;\n        return {\n            backgroundColor: color,\n        };\n    };\n\n    const columnHeaders = (index) => {\n        return '' + index;\n    };\n\n    return (\n        <>\n            {loadingStatus === 'initial' ? (\n                <a href=\"#\" onClick={loadClick}>\n                    Load global database of power plants\n                </a>\n            ) : loadingStatus === 'loading' ? (\n                'Loading...'\n            ) : null}\n            <div className=\"sheet-box\">\n                <Sheet\n                    cellStyle={cellStyle}\n                    editData={editData}\n                    displayData={displayData}\n                    sourceData={sourceData}\n                    cellWidth={cellWidth}\n                    cellHeight={cellHeight}\n                    onChange={onChange}\n                    readOnly={isReadOnly}\n                    onCellWidthChange={onCellWidthChange}\n                    onCellHeightChange={onCellHeightChange}\n                    columnHeaderStyle={headerStyle}\n                    columnHeaders={columnHeaders}\n                    freezeColumns={0}\n                    freezeRows={1}\n                />\n            </div>\n        </>\n    );\n}\n","import React from 'react';\nimport { useRef, useState } from 'react';\nimport { SheetBoxHeader } from './SheetBox';\nimport GitIcon from '../assets/git.svg';\n\nfunction Header() {\n    const textAreaRef = useRef(null);\n    const [copySuccess, setCopySuccess] = useState('');\n\n    const copyToClipboard = (e) => {\n        textAreaRef.current.select();\n        document.execCommand('copy');\n        e.target.focus();\n        setCopySuccess('Copied!');\n        setTimeout(() => {\n            setCopySuccess('');\n        }, 1000);\n    };\n\n    return (\n        <div className=\"container blue-bg\" id=\"home\">\n            <div className=\"content flex-row header\">\n                <div className=\"box text-box\">\n                    <div>\n                        <h1>Beautiful and fast spreadsheet component for React</h1>\n                        <p className=\"lightblue-p\">\n                            Sheet Happens is easy to implement and extend. \n                            <br></br>\n                            And it's super fast.\n                        </p>\n                    </div>\n                    <div className=\"lib-box\">\n                        <div className=\"install-box\" onClick={copyToClipboard}>\n                            <input readOnly ref={textAreaRef} value=\"npm install --save sheet-happens\" />\n                            {copySuccess !== '' && <div className=\"copy-success\">{copySuccess}</div>}\n                        </div>\n                        <a href=\"https://github.com/farseerdev/sheet-happens\" className=\"git-box\" target=\"_blank\">\n                            <img src={GitIcon} alt=\"Git\" />\n                            view on github\n                        </a>\n                    </div>\n                </div>\n                <div className=\"box\">\n                    <SheetBoxHeader />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","import React from 'react';\n\nfunction TitleSeparator({ title, id }) {\n    return (\n        <div className=\"title-separator\" id={id ? id : ''}>\n            <p>{title ? title : 'No title'}</p>\n            <div className=\"separator\"></div>\n        </div>\n    );\n}\n\nexport default TitleSeparator;\n","import React from 'react';\n\nfunction Wrap({ children }) {\n    return (\n        <div className=\"container\">\n            <div className=\"content flex-row\">{children}</div>\n        </div>\n    );\n}\n\nexport default Wrap;\n","import React from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { xcode } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nfunction Code() {\n    return (\n        <SyntaxHighlighter language=\"javascript\" style={xcode}>\n            {`function SheetBox() {\n    const [data, setData] = useState(initialData);\n    const [cellWidth, setCellWidth] = useState([]);\n    const [cellHeight, setCellHeight] = useState([]);\n\n    const onSelectionChanged = (x1, y1, x2, y2) => {};\n    const onRightClick = () => {};\n    const columnHeaders = ['A', 'B', 'C'];\n    const cellStyle = (x, y) => {\n        return {};\n    };\n    const editData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const displayData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n    const sourceData = (x, y) => {\n        return data?.[y]?.[x];\n    };\n\n    const onChange = (changes) => {\n        const newData = [...data];\n        for (const change of changes) {\n            if (!newData[change.y]) {\n                newData[change.y] = [];\n            }\n            newData[change.y][change.x] = change.value;\n        }\n        setData(newData);\n    };\n\n    const isReadOnly = (x, y) => {\n        return false;\n    };\n\n    const onCellWidthChange = (columnIdx, newWidth) => {\n        const cw = [...cellWidth];\n        if (columnIdx > cw.length) {\n            for (let i = cw.length; i <= columnIdx; i++) {\n                cw.push(100);\n            }\n        }\n        cw[columnIdx] = newWidth;\n        setCellWidth(cw);\n    };\n    const onCellHeightChange = (rowIdx, newHeight) => {\n        const ch = [...cellHeight];\n        if (rowIdx > ch.length) {\n            for (let i = ch.length; i <= rowIdx; i++) {\n                ch.push(22);\n            }\n        }\n        ch[rowIdx] = newHeight;\n        setCellHeight(ch);\n    };\n\n    return (\n        <div className=\"sheet-box\">\n            <Sheet\n                onSelectionChanged={onSelectionChanged}\n                onRightClick={onRightClick}\n                columnHeaders={columnHeaders}\n                cellStyle={cellStyle}\n                editData={editData}\n                displayData={displayData}\n                sourceData={sourceData}\n                cellWidth={cellWidth}\n                cellHeight={cellHeight}\n                onChange={onChange}\n                readOnly={isReadOnly}\n                onCellWidthChange={onCellWidthChange}\n                onCellHeightChange={onCellHeightChange}\n                freezeColumns={0}\n                freezeRows={0}\n            />\n        </div>\n    );\n}`}\n        </SyntaxHighlighter>\n    );\n}\n\nexport default Code;\n","import React from 'react';\n\nfunction Footer() {\n    return (\n        <div className=\"footer\">\n            <p className=\"copy\">made by <a href=\"https://www.farseer.io\">farseer</a></p>\n        </div>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\nimport './index.css';\n\nimport Menu from './components/Menu';\nimport Header from './components/Header';\nimport TitleSeparator from './components/TitleSeparator';\nimport Wrap from './components/Wrap';\nimport Code from './components/Code';\nimport { SheetBoxStyle, SheetBoxBasic, SheetBoxFormatting, SheetBoxVeryBigData } from './components/SheetBox';\nimport Footer from './components/Footer';\n\nconst App = () => {\n    return (\n        <>\n            <Menu />\n            <Header />\n\n            <TitleSeparator title=\"usage\" id=\"usage\" />\n            <Wrap>\n                <div className=\"box full-width\" style={{ overflowX: 'auto' }}>\n                    <Code />\n                </div>\n            </Wrap>\n\n            <TitleSeparator title=\"Let me show you its features\" id=\"features\" />\n            <Wrap>\n                <div className=\"box\">\n                    <SheetBoxBasic />\n                </div>\n                <div className=\"box\">\n                    <h3>Basic spreadsheet</h3>\n                    <p>\n                        It has all the features you'd expect from the spreadsheet: keyboard navigation, copy cells by\n                        dragging the small square, copy/paste from and to Excel and Google Sheets, resize columns and\n                        rows.\n                    </p>\n                </div>\n            </Wrap>\n            <Wrap>\n                <div className=\"box\">\n                    <SheetBoxStyle />\n                </div>\n                <div className=\"box\">\n                    <h3>Styling</h3>\n                    <p>\n                        You can change the cell color, alignment, font weight, margins and more. It's also possible to freeze first rows or columns.\n                    </p>\n                </div>\n            </Wrap>\n            <Wrap>\n                <div className=\"box\">\n                    <SheetBoxFormatting />\n                </div>\n                <div className=\"box\">\n                    <h3>Formatting</h3>\n                    <p>\n                        Sheet Happens uses different datasets for display and edit so you can apply different formatting when displaying the cell and editing the cell.\n                    </p>\n                </div>\n            </Wrap>\n\n            <TitleSeparator title=\"big dataset example\" id=\"big dataset example\" />\n            <Wrap>\n                <div className=\"box full-width\">\n                    <SheetBoxVeryBigData />\n                </div>\n            </Wrap>\n\n            <TitleSeparator title=\"documentation\" id=\"documentation\" />\n            <Wrap>\n                <div className=\"box full-width\">\n                    <p>Comming soon</p>\n                </div>\n            </Wrap>\n\n            <Footer />\n        </>\n    );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}